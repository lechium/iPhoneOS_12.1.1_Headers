/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:48:54 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/Frameworks/ARKit.framework/ARKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct __CVBuffer* CVBufferRef;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGImage* CGImageRef;

typedef struct _NSZone* NSZoneRef;

typedef struct CV3DOQContext* CV3DOQContextRef;

typedef struct {
	[3 columns];
} SCD_Struct_AR5;

typedef struct {
	long long field1;
	int field2;
	unsigned field3;
	long long field4;
} SCD_Struct_AR6;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct shared_ptr<arkit::KeyMapBuffer<const void *, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > {
	KeyMapBuffer<const void *, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<arkit::KeyMapBuffer<const void *, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > >;

typedef struct _compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > {
	 __value_;
} compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >;

typedef struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > {
	 __begin_;
	 __end_;
	compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > __end_cap_;
} vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >;

typedef struct _compressed_pair<float * __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > {
	 __value_;
} compressed_pair<float * __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> >;

typedef struct vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > {
	 __begin_;
	 __end_;
	compressed_pair<float * __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > __end_cap_;
} vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> >;

typedef struct _compressed_pair<float *, std::__1::allocator<float> > {
	float __value_;
} compressed_pair<float *, std::__1::allocator<float> >;

typedef struct vector<float, std::__1::allocator<float> > {
	float __begin_;
	float __end_;
	compressed_pair<float *, std::__1::allocator<float> > __end_cap_;
} vector<float, std::__1::allocator<float> >;

typedef struct {
	[4 columns];
} SCD_Struct_AR16;

typedef struct OpaqueVTImageRotationSession* OpaqueVTImageRotationSessionRef;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef struct {
	float field1;
	float field2;
	float field3;
} SCD_Struct_AR19;

typedef struct {
	SCD_Struct_AR19 field1;
	double field2;
} SCD_Struct_AR20;

typedef struct __IOHIDEventSystemClient* IOHIDEventSystemClientRef;

typedef struct __IOHIDServiceClient* IOHIDServiceClientRef;

typedef struct __IOHIDEvent* IOHIDEventRef;

typedef struct _compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> > {
	unsigned long long __value_;
} compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >;

typedef struct vector<unsigned long long, std::__1::allocator<unsigned long long> > {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> > __end_cap_;
} vector<unsigned long long, std::__1::allocator<unsigned long long> >;

typedef const struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >__compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >* ector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >Ref;

typedef struct OpaqueVTPixelTransferSession* OpaqueVTPixelTransferSessionRef;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	double x;
	double y;
	double z;
} SCD_Struct_AR29;

typedef struct {
	int field1;
	int field2;
} SCD_Struct_AR30;

typedef struct {
	float coefficients[9];
} SCD_Struct_AR31;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_AR33;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CV3DVIOError, double>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CV3DVIOError, double>, void *> > >;

typedef struct _tree<std::__1::__value_type<CV3DVIOError, double>, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true>, std::__1::allocator<std::__1::__value_type<CV3DVIOError, double> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CV3DVIOError, double>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true> > __pair3_;
} tree<std::__1::__value_type<CV3DVIOError, double>, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true>, std::__1::allocator<std::__1::__value_type<CV3DVIOError, double> > >;

typedef struct map<CV3DVIOError, double, std::__1::less<CV3DVIOError>, std::__1::allocator<std::__1::pair<const CV3DVIOError, double> > > {
	tree<std::__1::__value_type<CV3DVIOError, double>, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true>, std::__1::allocator<std::__1::__value_type<CV3DVIOError, double> > > __tree_;
} map<CV3DVIOError, double, std::__1::less<CV3DVIOError>, std::__1::allocator<std::__1::pair<const CV3DVIOError, double> > >;

typedef struct CV3DSurfaceDetectionParameters {
	unsigned minDetections;
	unsigned minimumSupportHorizontal;
	unsigned minimumSupportVertical;
} CV3DSurfaceDetectionParameters;

typedef struct CV3DVIOSurfaceDetectionRuntimeConfiguration {
	int desiredOrientations;
	int desiredExtentType;
	double minVergenceAngle;
	BOOL lineTrackingAlwaysOn;
} CV3DVIOSurfaceDetectionRuntimeConfiguration;

typedef struct CV3DVIOContext* CV3DVIOContextRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct aligned_storage<float> {
	dummy_u dummy_;
	char data[4];
	a4) aligner_;
} aligned_storage<float>;

typedef struct optional<float> {
	BOOL m_initialized;
	aligned_storage<float> m_storage;
} optional<float>;

typedef struct ExponentialSmoother<float> {
	optional<float> state;
} ExponentialSmoother<float>;

typedef struct _compressed_pair<ARPatch *, std::__1::allocator<ARPatch> > {
	/*function pointer*/void* __value_;
} compressed_pair<ARPatch *, std::__1::allocator<ARPatch> >;

typedef struct vector<ARPatch, std::__1::allocator<ARPatch> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<ARPatch *, std::__1::allocator<ARPatch> > __end_cap_;
} vector<ARPatch, std::__1::allocator<ARPatch> >;

typedef struct {
	array<unsigned char, 16> field1;
	unsigned long long field2;
	SCD_Struct_AR16 field3;
	a field4;
	const  field5;
	const  field6;
	a field7;
	y field8;
	< field9;
	float field10;
	long field11;
	o field12;
	a field13;
	t field14;
	  field15;
	_ field16;
	_ field17;
	a field18;
	t field19;
	t field20;
	const  field21;
	intb field22;
	u field23;
	t field24;
	e field25;
	_ field26;
	_(( field27;
	e field28;
	x field29;
	t field30;
	_ field31;
	void field32;
	e field33;
	char field34;
	t field35;
	o field36;
	const  field37;
	_ field38;
	t field39;
	y field40;
	p field41;
	e( field42;
	3))) field43;
	, field44;
	  field45;
	4 field46;
	> field47;
	short field48;
	e field49;
	t field50;
	< field51;
	short field52;
	t field53;
	double field54;
	SEL field55;
	SEL field56;
	_ field57;
	_ field58;
	1 field59;
	SEL field60;
	SEL field61;
	a field62;
	const  field63;
	const  field64;
	a field65;
	y field66;
	< field67;
	u field68;
	n field69;
	short field70;
	int field71;
	g field72;
	n field73;
	e field74;
	double field75;
	  field76;
	char field77;
	h field78;
	a field79;
	const  field80;
	, field81;
	  field82;
	1 field83;
	6 field84;
	> field85;
	, field86;
	  field87;
	short field88;
	t field89;
	double field90;
	SEL field91;
	SEL field92;
	_ field93;
	_ field94;
	1 field95;
	SEL field96;
	SEL field97;
	long field98;
	e field99;
	short field100;
	short field101;
	< field102;
	short field103;
	t field104;
	double field105;
	SEL field106;
	SEL field107;
	_ field108;
	_ field109;
	1 field110;
	SEL field111;
	SEL field112;
	a field113;
	const  field114;
	const  field115;
	a field116;
	y field117;
	< field118;
	u field119;
	n field120;
	short field121;
	int field122;
	g field123;
	n field124;
	e field125;
	double field126;
	  field127;
	char field128;
	h field129;
	a field130;
	const  field131;
	, field132;
	  field133;
	1 field134;
	6 field135;
	> field136;
	  field137;
	> field138;
	, field139;
	  field140;
	short field141;
	t field142;
	double field143;
	SEL field144;
	SEL field145;
	_ field146;
	_ field147;
	1 field148;
	SEL field149;
	SEL field150;
	a field151;
	long field152;
	long field153;
	o field154;
	char field155;
	a field156;
	t field157;
	o field158;
	const  field159;
	< field160;
	short field161;
	t field162;
	double field163;
	SEL field164;
	SEL field165;
	_ field166;
	_ field167;
	1 field168;
	SEL field169;
	SEL field170;
	a field171;
	const  field172;
	const  field173;
	a field174;
	y field175;
	< field176;
	u field177;
	n field178;
	short field179;
	int field180;
	g field181;
	n field182;
	e field183;
	double field184;
	  field185;
	char field186;
	h field187;
	a field188;
	const  field189;
	, field190;
	  field191;
	1 field192;
	6 field193;
	> field194;
	  field195;
	> field196;
	  field197;
	> field198;
	id field199;
} SCD_Struct_AR48;

typedef struct archive_entry* archive_entryRef;

typedef struct archive* archiveRef;

typedef struct CV3DODTContext* CV3DODTContextRef;

typedef struct Matrix<float, 0, 1> {
	float m_data;
	unsigned long long m_capacity;
	unsigned m_rows;
} Matrix<float, 0, 1>;

typedef struct _compressed_pair<int *, std::__1::allocator<int> > {
	int __value_;
} compressed_pair<int *, std::__1::allocator<int> >;

typedef struct Matrix<float, 0, 0> {
	float m_data;
	unsigned long long m_capacity;
	unsigned m_rows;
	unsigned m_cols;
} Matrix<float, 0, 0>;

typedef struct _compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > {
	unsigned long long __value_;
} compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >;

typedef struct vector<unsigned long, std::__1::allocator<unsigned long> > {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > __end_cap_;
} vector<unsigned long, std::__1::allocator<unsigned long> >;

typedef struct aligned_storage<cva::Matrix<float, 9, 1> > {
	dummy_u dummy_;
	char data[36];
	a4) aligner_;
} aligned_storage<cva::Matrix<float, 9, 1> >;

typedef struct optional<cva::Matrix<float, 9, 1> > {
	BOOL m_initialized;
	aligned_storage<cva::Matrix<float, 9, 1> > m_storage;
} optional<cva::Matrix<float, 9, 1> >;

typedef struct ExponentialSmoother<cva::Matrix<float, 9, 1> > {
	optional<cva::Matrix<float, 9, 1> > state;
} ExponentialSmoother<cva::Matrix<float, 9, 1> >;

typedef struct shared_ptr<arkit::PrecomputedFaceData> {
	PrecomputedFaceData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<arkit::PrecomputedFaceData>;

typedef struct vector<int, std::__1::allocator<int> > {
	int __begin_;
	int __end_;
	compressed_pair<int *, std::__1::allocator<int> > __end_cap_;
} vector<int, std::__1::allocator<int> >;

typedef struct FacialLightEstimation {
	Matrix<float, 0, 1> m_validSampleIntensities;
	vector<int, std::__1::allocator<int> > m_validChromaSampleIDS;
	vector<int, std::__1::allocator<int> > m_sampleIndices_all;
	Matrix<float, 0, 0> m_validRtfs;
	shared_ptr<arkit::PrecomputedFaceData> m_precomputedFaceData;
	ExponentialSmoother<cva::Matrix<float, 9, 1> > m_smoother;
	vector<unsigned long, std::__1::allocator<unsigned long> > m_inliers;
} FacialLightEstimation;

typedef struct FLEOptions {
	float smoothingAlpha;
	float lightIntensityMinimumConstraint;
	BOOL ransacEnabled;
	BOOL chromaEnabled;
	int ransacMinSampleSet;
	float ransacErrorThreshold;
	BOOL darkBehindHead;
} FLEOptions;

typedef struct CV3DSurfaceDetectionContext* CV3DSurfaceDetectionContextRef;

typedef struct {
	double m11;
	double m12;
	double m13;
	double m21;
	double m22;
	double m23;
	double m31;
	double m32;
	double m33;
} SCD_Struct_AR65;

typedef struct _compressed_pair<short *, std::__1::allocator<short> > {
	short __value_;
} compressed_pair<short *, std::__1::allocator<short> >;

typedef struct vector<short, std::__1::allocator<short> > {
	short __begin_;
	short __end_;
	compressed_pair<short *, std::__1::allocator<short> > __end_cap_;
} vector<short, std::__1::allocator<short> >;

typedef struct {
	void plan;
	int network_index;
} SCD_Struct_AR68;

typedef struct {
	float bias_r;
	float bias_g;
	float bias_b;
	float scale;
	BOOL network_wants_bgr;
} SCD_Struct_AR69;

typedef struct _compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > {
	char* __value_;
} compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >;

typedef struct vector<unsigned char, std::__1::allocator<unsigned char> > {
	char* __begin_;
	char* __end_;
	compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > __end_cap_;
} vector<unsigned char, std::__1::allocator<unsigned char> >;

typedef struct vImage_Buffer {
	void data;
	unsigned long long height;
	unsigned long long width;
	unsigned long long rowBytes;
} vImage_Buffer;

typedef struct {
	void field1;
	void field2;
	unsigned long long field3[4];
	unsigned long long field4[4];
	unsigned long long field5;
	unsigned long long field6;
	unsigned long long field7;
	unsigned long long field8;
	unsigned long long field9;
	unsigned long long field10;
	unsigned long long field11;
	unsigned long long field12;
	unsigned long long field13;
	unsigned long long field14;
	int field15;
} SCD_Struct_AR73;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane> > >;

typedef struct map<std::__1::array<unsigned char, 16>, ARTexturedPlane, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 16>, ARTexturedPlane> > > {
	tree<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::__map_value_compare<std::__1::array<unsigned char, 16>, std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::less<std::__1::array<unsigned char, 16> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > __tree_;
} map<std::__1::array<unsigned char, 16>, ARTexturedPlane, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 16>, ARTexturedPlane> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > >;

typedef struct _compressed_pair<unsigned long, std::__1::less<std::__1::array<unsigned char, 16> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<std::__1::array<unsigned char, 16> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::array<unsigned char, 16>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::array<unsigned char, 16>, void *> > >;

typedef struct _tree<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::array<unsigned char, 16>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<std::__1::array<unsigned char, 16> > > __pair3_;
} tree<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > >;

typedef struct set<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > {
	tree<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > __tree_;
} set<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > >;

typedef struct _compressed_pair<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> **, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> > {
	pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> __value_;
} compressed_pair<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> **, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> >;

typedef struct _split_buffer<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> > {
	pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> __first_;
	pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> __begin_;
	pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> __end_;
	compressed_pair<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> **, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> > __end_cap_;
} split_buffer<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> >;

typedef struct deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > {
	split_buffer<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > __size_;
} deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > >;

typedef struct queue<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > > {
	deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > c;
} queue<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > >;

typedef struct ARPlaneUpdateQueue {
	queue<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::deque<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane>, std::__1::allocator<std::__1::pair<std::__1::array<unsigned char, 16>, ARTexturedPlane> > > > queue;
	set<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > elements;
} ARPlaneUpdateQueue;

typedef struct _compressed_pair<ARTexturedPlane *, std::__1::allocator<ARTexturedPlane> > {
	/*function pointer*/void* __value_;
} compressed_pair<ARTexturedPlane *, std::__1::allocator<ARTexturedPlane> >;

typedef struct vector<ARTexturedPlane, std::__1::allocator<ARTexturedPlane> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<ARTexturedPlane *, std::__1::allocator<ARTexturedPlane> > __end_cap_;
} vector<ARTexturedPlane, std::__1::allocator<ARTexturedPlane> >;

typedef struct {
	array<unsigned char, 16> field1;
	unsigned long long field2;
	SCD_Struct_AR16 field3;
	a field4;
	const  field5;
	const  field6;
	a field7;
	y field8;
	< field9;
	float field10;
	long field11;
	o field12;
	a field13;
	t field14;
	  field15;
	_ field16;
	_ field17;
	a field18;
	t field19;
	t field20;
	const  field21;
	intb field22;
	u field23;
	t field24;
	e field25;
	_ field26;
	_(( field27;
	e field28;
	x field29;
	t field30;
	_ field31;
	void field32;
	e field33;
	char field34;
	t field35;
	o field36;
	const  field37;
	_ field38;
	t field39;
	y field40;
	p field41;
	e( field42;
	3))) field43;
	, field44;
	  field45;
	4 field46;
	> field47;
	set<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > field48;
	id field49;
} SCD_Struct_AR90;

