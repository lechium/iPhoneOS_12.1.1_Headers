/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:45:36 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MediaPlayer/MediaPlayer-Structs.h>
#import <libobjc.A.dylib/MPQueueBehaviorManaging.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@protocol MPQueueFeederDelegate;
@class NSMutableDictionary, MSVMutableBidirectionalDictionary, NSString, NSData, NSDictionary, MPModelPlayEvent;

@interface MPQueueFeeder : NSObject <MPQueueBehaviorManaging, NSSecureCoding> {

	long long _repeatType;
	long long _shuffleType;
	NSMutableDictionary* _nextStartTimes;
	MSVMutableBidirectionalDictionary* _exportableItemIDs;
	BOOL _requiresQueueChangeVerification;
	id<MPQueueFeederDelegate> _delegate;
	unsigned long long _state;
	NSString* _playActivityFeatureName;
	NSData* _playActivityRecommendationData;
	NSString* _siriReferenceIdentifier;
	NSDictionary* _siriWHAMetricsInfo;
	NSString* _playbackContextUniqueIdentifier;
	long long _activeShuffleType;
	NSString* _uniqueIdentifier;
	MPModelPlayEvent* _modelPlayEvent;
	SCD_Struct_MP6 _skipLimit;

}

@property (nonatomic,copy) NSString * playActivityFeatureName;                                 //@synthesize playActivityFeatureName=_playActivityFeatureName - In the implementation block
@property (nonatomic,copy) NSData * playActivityRecommendationData;                            //@synthesize playActivityRecommendationData=_playActivityRecommendationData - In the implementation block
@property (nonatomic,copy) NSString * siriReferenceIdentifier;                                 //@synthesize siriReferenceIdentifier=_siriReferenceIdentifier - In the implementation block
@property (nonatomic,copy) NSDictionary * siriWHAMetricsInfo;                                  //@synthesize siriWHAMetricsInfo=_siriWHAMetricsInfo - In the implementation block
@property (nonatomic,copy) NSString * playbackContextUniqueIdentifier;                         //@synthesize playbackContextUniqueIdentifier=_playbackContextUniqueIdentifier - In the implementation block
@property (nonatomic,readonly) long long realRepeatType; 
@property (nonatomic,readonly) long long realShuffleType; 
@property (assign,nonatomic) long long repeatType;                                             //@synthesize repeatType=_repeatType - In the implementation block
@property (assign,nonatomic) long long shuffleType;                                            //@synthesize shuffleType=_shuffleType - In the implementation block
@property (assign,nonatomic) long long activeShuffleType;                                      //@synthesize activeShuffleType=_activeShuffleType - In the implementation block
@property (nonatomic,readonly) NSString * uniqueIdentifier;                                    //@synthesize uniqueIdentifier=_uniqueIdentifier - In the implementation block
@property (nonatomic,readonly) MPModelPlayEvent * modelPlayEvent;                              //@synthesize modelPlayEvent=_modelPlayEvent - In the implementation block
@property (assign,nonatomic,__weak) id<MPQueueFeederDelegate> delegate;                        //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) unsigned long long state;                                         //@synthesize state=_state - In the implementation block
@property (assign,nonatomic) BOOL requiresQueueChangeVerification;                             //@synthesize requiresQueueChangeVerification=_requiresQueueChangeVerification - In the implementation block
@property (nonatomic,readonly) unsigned long long itemCount; 
@property (nonatomic,readonly) BOOL allowsQueueResetWhenReachingEnd; 
@property (nonatomic,readonly) Class itemClass; 
@property (nonatomic,readonly) BOOL canReorder; 
@property (nonatomic,readonly) BOOL playerPreparesItemsForPlaybackAsynchronously; 
@property (assign,nonatomic) SCD_Struct_MP6 skipLimit;                                         //@synthesize skipLimit=_skipLimit - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) BOOL allowsUserVisibleUpcomingItems; 
@property (nonatomic,readonly) BOOL canSeek; 
@property (nonatomic,readonly) BOOL canSkipToPreviousItem; 
@property (nonatomic,readonly) long long playbackMode; 
@property (nonatomic,readonly) BOOL userCanChangeShuffleAndRepeatType; 
+(BOOL)supportsStateRestoration;
+(BOOL)supportsSecureCoding;
-(id)pathAtIndex:(unsigned long long)arg1 ;
-(id)identifierAtIndex:(unsigned long long)arg1 ;
-(long long)playbackMode;
-(unsigned long long)indexOfItemWithIdentifier:(id)arg1 ;
-(NSString *)siriReferenceIdentifier;
-(NSDictionary *)siriWHAMetricsInfo;
-(id)copyRawItemAtIndex:(unsigned long long)arg1 ;
-(id)playbackInfoForIdentifier:(id)arg1 ;
-(void)reloadWithPlaybackContext:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(MPModelPlayEvent *)modelPlayEvent;
-(id)localizedPositionInPlaylistString:(id)arg1 ;
-(id)errorResolverForItem:(id)arg1 ;
-(BOOL)canSkipToPreviousItemForItem:(id)arg1 ;
-(id)queueIdentifierForItemID:(id)arg1 ;
-(id)itemIDAtIndex:(long long)arg1 ;
-(id)contentItemIDForQueueItemID:(id)arg1 ;
-(Class)itemClass;
-(long long)repeatType;
-(long long)shuffleType;
-(id)itemForIndex:(unsigned long long)arg1 ;
-(BOOL)hasValidItemAtIndex:(unsigned long long)arg1 ;
-(id)contentItemIDAtIndex:(long long)arg1 ;
-(id)_itemForIndex:(long long)arg1 queueIdentifier:(id)arg2 ;
-(id)mediaItemAtIndex:(unsigned long long)arg1 ;
-(void)contentsDidChangeWithPreferredStartIndex:(unsigned long long)arg1 error:(id)arg2 ;
-(BOOL)_canPurgeNextStartTimes;
-(BOOL)canSkipItem:(id)arg1 ;
-(BOOL)allowsUserVisibleUpcomingItems;
-(BOOL)canSkipToPreviousItem;
-(BOOL)userCanChangeShuffleAndRepeatType;
-(void)restoreState:(/*^block*/id)arg1 ;
-(BOOL)shouldReuseQueueFeederForPlaybackContext:(id)arg1 ;
-(void)setNextStartTime:(double)arg1 forIndentifier:(id)arg2 ;
-(void)shuffleItemsWithAnchor:(unsigned long long*)arg1 ;
-(void)reloadWithPlaybackContext:(id)arg1 requireFinalTracklist:(BOOL)arg2 completionHandler:(/*^block*/id)arg3 ;
-(BOOL)shouldBeginPlaybackOfItem:(id)arg1 error:(id*)arg2 ;
-(BOOL)allowsQueueResetWhenReachingEnd;
-(BOOL)canReorder;
-(long long)itemTypeForIndex:(unsigned long long)arg1 ;
-(BOOL)playerPreparesItemsForPlaybackAsynchronously;
-(SCD_Struct_MP6)skipLimit;
-(id)itemForItemID:(id)arg1 ;
-(long long)indexForItemID:(id)arg1 ;
-(void)generateContentIDForItem:(id)arg1 ;
-(BOOL)isPlaceholderItemForQueueIdentifier:(id)arg1 ;
-(void)applyVolumeNormalizationForItem:(id)arg1 ;
-(long long)realRepeatType;
-(long long)realShuffleType;
-(id)audioSessionModeForItemAtIndex:(unsigned long long)arg1 ;
-(BOOL)hasItemForIndex:(unsigned long long)arg1 ;
-(unsigned long long)initialPlaybackQueueDepthForStartingIndex:(unsigned long long)arg1 ;
-(id)metadataItemForIdentifier:(id)arg1 ;
-(unsigned long long)indexOfMediaItem:(id)arg1 ;
-(id)mediaItemForIdentifier:(id)arg1 ;
-(void)contentsDidChangeWithPreferredStartIndex:(unsigned long long)arg1 ;
-(void)contentsDidChangeWithReplacementPlaybackContext:(id)arg1 ;
-(void)invalidateAssets;
-(void)invalidateRealRepeatType;
-(void)invalidateRealShuffleType;
-(id)localizedAttributedPositionInPlaylistStringForItem:(id)arg1 withRegularTextAttributes:(id)arg2 emphasizedTextAttributes:(id)arg3 ;
-(void)player:(id)arg1 currentItemWillChangeFromItem:(id)arg2 ;
-(void)player:(id)arg1 currentItemDidChangeToItem:(id)arg2 ;
-(BOOL)player:(id)arg1 shouldContinuePlaybackForNetworkType:(long long)arg2 returningError:(id*)arg3 ;
-(BOOL)requiresQueueChangeVerification;
-(void)setRequiresQueueChangeVerification:(BOOL)arg1 ;
-(void)setSkipLimit:(SCD_Struct_MP6)arg1 ;
-(NSString *)playActivityFeatureName;
-(void)setPlayActivityFeatureName:(NSString *)arg1 ;
-(NSData *)playActivityRecommendationData;
-(void)setPlayActivityRecommendationData:(NSData *)arg1 ;
-(void)setSiriReferenceIdentifier:(NSString *)arg1 ;
-(void)setSiriWHAMetricsInfo:(NSDictionary *)arg1 ;
-(NSString *)playbackContextUniqueIdentifier;
-(void)setPlaybackContextUniqueIdentifier:(NSString *)arg1 ;
-(void)setRepeatType:(long long)arg1 ;
-(void)setShuffleType:(long long)arg1 ;
-(long long)activeShuffleType;
-(void)setActiveShuffleType:(long long)arg1 ;
-(id)itemForIdentifier:(id)arg1 ;
-(BOOL)canSeek;
-(id)init;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)setDelegate:(id<MPQueueFeederDelegate>)arg1 ;
-(unsigned long long)state;
-(id<MPQueueFeederDelegate>)delegate;
-(void)setState:(unsigned long long)arg1 ;
-(unsigned long long)itemCount;
-(NSString *)uniqueIdentifier;
-(id)preferredLanguages;
@end

