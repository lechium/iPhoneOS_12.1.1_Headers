/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:45:38 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MediaPlayer/MPAVItem.h>
#import <libobjc.A.dylib/AVAssetResourceLoaderDelegate.h>
#import <libobjc.A.dylib/SSVSecureKeyDeliveryRequestOperationDelegate.h>
#import <libobjc.A.dylib/MPRTCReportingItemSessionCreating.h>

@protocol OS_dispatch_queue;
@class NSString, NSObject, NSError, NSNumber, NSOperationQueue, MPStorePlayWhileDownloadSession, MPStreamingDownloadSession, AVAssetResourceLoadingRequest, NSData, MPMediaPlaybackItemMetadata, NSURL;

@interface MPStoreAVItem : MPAVItem <AVAssetResourceLoaderDelegate, SSVSecureKeyDeliveryRequestOperationDelegate, MPRTCReportingItemSessionCreating> {

	NSObject*<OS_dispatch_queue> _accessQueue;
	NSObject*<OS_dispatch_queue> _persistenceQueue;
	unsigned long long _assetQuality;
	BOOL _didDeferLeaseStart;
	BOOL _externalDisplay;
	BOOL _hasEverPrioritizedPlayerItem;
	BOOL _hasPrioritizedPlayWhileDownloadSession;
	BOOL _hasPrioritizedStreamingDownloadSession;
	BOOL _hasValidAssetQuality;
	BOOL _isActivePlayerItem;
	NSError* _lastResourceLoadingError;
	NSNumber* _bookmarkTime;
	NSOperationQueue* _operationQueue;
	MPStorePlayWhileDownloadSession* _playWhileDownloadSession;
	unsigned long long _preferredAssetQuality;
	id _rtcReportingParentHierarchyToken;
	NSString* _rtcReportingServiceIdentifier;
	MPStreamingDownloadSession* _streamingDownloadSession;
	double _playbackStartTime;
	AVAssetResourceLoadingRequest* _loadingRequest;
	NSData* _serverPlaybackContextDataForStoppingLease;
	AVAssetResourceLoadingRequest* _externalLoadingRequest;
	NSData* _externalServerPlaybackContextDataForStoppingLease;
	BOOL _rentalCheckoutRequired;
	BOOL _ignoreHLSOfflinePlaybackKeys;
	unsigned long long _options;
	MPMediaPlaybackItemMetadata* _playbackItemMetadata;
	NSString* _assetSourceStoreFrontID;
	NSString* _requestingBundleIdentifier;
	NSString* _requestingBundleVersion;
	long long _equivalencySourceAdamID;
	unsigned long long _rentalID;

}

@property (nonatomic,retain) NSData * externalServerPlaybackContextDataForStoppingLease;                             //@synthesize externalServerPlaybackContextDataForStoppingLease=_externalServerPlaybackContextDataForStoppingLease - In the implementation block
@property (nonatomic,retain) NSData * serverPlaybackContextDataForStoppingLease;                                     //@synthesize serverPlaybackContextDataForStoppingLease=_serverPlaybackContextDataForStoppingLease - In the implementation block
@property (getter=isRentalCheckoutRequired,nonatomic,readonly) BOOL rentalCheckoutRequired;                          //@synthesize rentalCheckoutRequired=_rentalCheckoutRequired - In the implementation block
@property (nonatomic,readonly) unsigned long long rentalID;                                                          //@synthesize rentalID=_rentalID - In the implementation block
@property (nonatomic,readonly) BOOL allowsStoreBagStreamingKeyURLsFallback; 
@property (getter=isiTunesStoreStream,nonatomic,readonly) BOOL iTunesStoreStream; 
@property (nonatomic,copy,readonly) NSURL * streamingKeyCertificateURL; 
@property (nonatomic,copy,readonly) NSURL * streamingKeyServerURL; 
@property (assign,getter=isIgnoringHLSOfflinePlaybackKeys,nonatomic) BOOL ignoreHLSOfflinePlaybackKeys;              //@synthesize ignoreHLSOfflinePlaybackKeys=_ignoreHLSOfflinePlaybackKeys - In the implementation block
@property (nonatomic,readonly) unsigned long long options;                                                           //@synthesize options=_options - In the implementation block
@property (nonatomic,readonly) MPMediaPlaybackItemMetadata * playbackItemMetadata;                                   //@synthesize playbackItemMetadata=_playbackItemMetadata - In the implementation block
@property (nonatomic,readonly) unsigned long long streamType; 
@property (nonatomic,copy) NSString * assetSourceStoreFrontID;                                                       //@synthesize assetSourceStoreFrontID=_assetSourceStoreFrontID - In the implementation block
@property (nonatomic,copy) NSString * requestingBundleIdentifier;                                                    //@synthesize requestingBundleIdentifier=_requestingBundleIdentifier - In the implementation block
@property (nonatomic,copy) NSString * requestingBundleVersion;                                                       //@synthesize requestingBundleVersion=_requestingBundleVersion - In the implementation block
@property (assign,nonatomic) long long equivalencySourceAdamID;                                                      //@synthesize equivalencySourceAdamID=_equivalencySourceAdamID - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) id rtcReportingParentHierarchyToken; 
@property (nonatomic,copy,readonly) NSString * rtcReportingServiceIdentifier; 
@property (nonatomic,readonly) long long rtcReportingAssetType; 
+(BOOL)isPlaybackItemMetadataValidForAssetCreation:(id)arg1 ;
+(BOOL)isPlaybackItemMetadataStreamingForAssetCreation:(id)arg1 returningProtectionType:(unsigned long long*)arg2 ;
+(unsigned long long)_currentPreferredAssetQualityForPlaybackItemMetadata:(id)arg1 ;
+(id)_assetURLForCachedLocalPlaybackAssetFilePathForPlaybackItemMetadata:(id)arg1 withMinimumAssetQuality:(unsigned long long)arg2 assetOptions:(id)arg3 returningProtectionType:(unsigned long long*)arg4 assetQuality:(unsigned long long*)arg5 usesPurchaseBundle:(BOOL*)arg6 ;
+(double)nominalHasBeenPlayedThresholdForDuration:(double)arg1 ;
+(BOOL)shouldIncrementPlayCountForElapsedTime:(double)arg1 startTime:(double)arg2 stopTime:(double)arg3 ;
+(BOOL)hasNominalAmountBeenPlayedForElapsedTime:(double)arg1 startTime:(double)arg2 stopTime:(double)arg3 ;
-(void)setRating:(float)arg1 ;
-(id)artist;
-(void)setAlternateAudioTrackID:(int)arg1 ;
-(void)setAlternateAudioTrackLocale:(id)arg1 ;
-(void)loadAssetAndPlayerItem;
-(id)playbackInfo;
-(id)displayableText;
-(long long)_persistedLikedState;
-(void)_handleUpdatedLikedState:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(long long)storeItemInt64ID;
-(BOOL)useEmbeddedChapterData;
-(id)artworkCatalogForPlaybackTime:(double)arg1 ;
-(long long)albumStoreID;
-(long long)artistStoreID;
-(long long)storeSubscriptionAdamID;
-(id)mainTitle;
-(id)albumArtist;
-(id)genre;
-(unsigned long long)discNumber;
-(unsigned long long)discCount;
-(unsigned long long)albumTrackNumber;
-(unsigned long long)albumTrackCount;
-(id)externalContentIdentifier;
-(BOOL)isExplicitTrack;
-(BOOL)shouldShowComposer;
-(id)modelGenericObject;
-(id)chapterTimeMarkers;
-(id)artworkTimeMarkers;
-(id)urlTimeMarkers;
-(double)durationFromExternalMetadata;
-(unsigned long long)albumPersistentID;
-(unsigned long long)albumArtistPersistentID;
-(unsigned long long)artistPersistentID;
-(unsigned long long)genrePersistentID;
-(unsigned long long)composerPersistentID;
-(long long)customAVEQPreset;
-(BOOL)allowsEQ;
-(void)_currentPlaybackRateDidChange:(float)arg1 ;
-(BOOL)isSupportedDefaultPlaybackSpeed:(long long)arg1 ;
-(void)setPlaybackStoppedTime:(double)arg1 ;
-(void)notePlaybackFinishedByHittingEnd;
-(void)setPlaybackCheckpointCurrentTime:(double)arg1 ;
-(void)setPlaybackFinishedTime:(double)arg1 ;
-(void)applyVolumeNormalizationWithSoundCheckEnabled:(BOOL)arg1 ;
-(BOOL)canSeedGenius;
-(BOOL)isCloudItem;
-(BOOL)isValidPlayerSubstituteForItem:(id)arg1 ;
-(BOOL)isAssetURLValid;
-(BOOL)hasAlternatesForTypes:(unsigned long long)arg1 ;
-(BOOL)isStreamable;
-(void)prepareForRate:(float)arg1 completionHandler:(/*^block*/id)arg2 ;
-(BOOL)supportsRewindAndFastForward15Seconds;
-(void)setupPlaybackInfo;
-(BOOL)_isBackgroundPlaybackRestricted;
-(void)_loadMediaItemWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)reevaluateType;
-(void)_willBecomeActivePlayerItem;
-(void)_willResignActivePlayerItem;
-(id)copyrightText;
-(BOOL)isLikedStateEnabled;
-(BOOL)supportsLikedState;
-(void)setLoudnessInfoVolumeNormalization:(float)arg1 ;
-(BOOL)prefersSeekOverSkip;
-(BOOL)allowsAirPlayFromCloud;
-(BOOL)allowsExternalPlayback;
-(void)setExternalDisplay:(BOOL)arg1 ;
-(NSString *)requestingBundleIdentifier;
-(NSString *)requestingBundleVersion;
-(void)setRequestingBundleIdentifier:(NSString *)arg1 ;
-(void)setRequestingBundleVersion:(NSString *)arg1 ;
-(long long)storePlaybackEndpointType;
-(id)lastResourceLoadingError;
-(BOOL)usesSubscriptionLease;
-(BOOL)didDeferLeaseStart;
-(BOOL)isiTunesStoreStream;
-(NSURL *)streamingKeyServerURL;
-(NSURL *)streamingKeyCertificateURL;
-(void)_persistURI:(id)arg1 persistentContentKey:(id)arg2 ;
-(void)_mediaPlaybackItemMetadataDidChangeNotification:(id)arg1 ;
-(void)_mediaPlaybackItemMetadataLikedStateDidChangeNotification:(id)arg1 ;
-(void)_checkInExternalPlaybackLease;
-(id)_newTimeMarkersForChapterType:(long long)arg1 ;
-(BOOL)_shouldRememberBookmarkTime;
-(MPMediaPlaybackItemMetadata *)playbackItemMetadata;
-(BOOL)_getAssetURL:(id*)arg1 playWhileDownloadSession:(id*)arg2 assetQuality:(unsigned long long*)arg3 error:(id*)arg4 usingStoreDownload:(id)arg5 assetOptions:(id)arg6 shouldStartDownload:(BOOL)arg7 ;
-(long long)equivalencySourceAdamID;
-(void)setEquivalencySourceAdamID:(long long)arg1 ;
-(NSString *)assetSourceStoreFrontID;
-(void)setAssetSourceStoreFrontID:(NSString *)arg1 ;
-(id)rtcReportingServiceIdentifierWithAssetURL:(id)arg1 ;
-(void)_prioritizeDownloadSessionsIfNeeded;
-(void)_handlePlaybackFinishedTime:(double)arg1 finishedByHittingEnd:(BOOL)arg2 ;
-(void)_applyLoudnessInfo;
-(void)_updateBookmarkTimeIfNecessary:(double)arg1 isCheckpoint:(BOOL)arg2 ;
-(id)_mediaSelectionOptionFromGroup:(id)arg1 withTrackID:(int)arg2 ;
-(unsigned long long)streamType;
-(id)_bookmarkTime;
-(BOOL)_handledLoadingRequestWithOfflinePersistantKey:(id)arg1 ;
-(BOOL)allowsStoreBagStreamingKeyURLsFallback;
-(BOOL)isRentalCheckoutRequired;
-(unsigned long long)rentalID;
-(void)_persistPlaybackStartTime:(double)arg1 ;
-(void)setExternalServerPlaybackContextDataForStoppingLease:(NSData *)arg1 ;
-(void)setServerPlaybackContextDataForStoppingLease:(NSData *)arg1 ;
-(NSData *)externalServerPlaybackContextDataForStoppingLease;
-(void)_stopLease:(id)arg1 withContextData:(id)arg2 ;
-(NSData *)serverPlaybackContextDataForStoppingLease;
-(id)_storeUbiquitousIdentifier;
-(void)handlePlaybackFinishedTime:(double)arg1 finishedByHittingEnd:(BOOL)arg2 ;
-(BOOL)isIgnoringHLSOfflinePlaybackKeys;
-(void)secureKeyDeliveryRequestOperationDidChangeServerPlaybackContextData:(id)arg1 ;
-(id)rtcReportingParentHierarchyToken;
-(NSString *)rtcReportingServiceIdentifier;
-(long long)rtcReportingAssetType;
-(id)initWithPlaybackItemMetadata:(id)arg1 options:(unsigned long long)arg2 ;
-(BOOL)isStreamingLowQualityAsset;
-(id)storeDownload;
-(long long)mpcReporting_equivalencySourceAdamID;
-(id)mpcReporting_requestingBundleIdentifier;
-(id)mpcReporting_requestingBundleVersion;
-(id)_chapterTitleForTime:(double)arg1 ;
-(void)setIgnoreHLSOfflinePlaybackKeys:(BOOL)arg1 ;
-(unsigned long long)mediaType;
-(id)album;
-(id)mediaItem;
-(unsigned long long)persistentID;
-(float)userRating;
-(BOOL)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2 ;
-(BOOL)resourceLoader:(id)arg1 shouldWaitForRenewalOfRequestedResource:(id)arg2 ;
-(id)init;
-(void)dealloc;
-(NSString *)description;
-(long long)type;
-(unsigned long long)options;
-(id)composer;
@end

