/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:42:29 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/Frameworks/CFNetwork.framework/CFNetwork
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSString, NSDictionary;

typedef struct _CFURLAuthChallenge* CFURLAuthChallengeRef;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct _CFHSTSPolicy* CFHSTSPolicyRef;

typedef struct _CFURLRequest* CFURLRequestRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct __CFString* CFStringRef;

typedef struct _NSZone* NSZoneRef;

typedef struct _CFURLResponse* CFURLResponseRef;

typedef struct __SecTrust* SecTrustRef;

typedef struct shared_ptr<TCPIOConnection> {
	TCPIOConnection __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TCPIOConnection>;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __SecIdentity* SecIdentityRef;

typedef struct _CFURLCredential* CFURLCredentialRef;

typedef struct CFURLProtocolClient {
	long long version;
	void client;
	/*function pointer*/void* retain;
	/*function pointer*/void* release;
	/*function pointer*/void* copyDescription;
	/*function pointer*/void* wasRedirected;
	/*function pointer*/void* cacheResponseIsValid;
	/*function pointer*/void* didReceiveResponse;
	/*function pointer*/void* didLoadData;
	/*function pointer*/void* didFinishLoading;
	/*function pointer*/void* didFail;
	/*function pointer*/void* didReceiveAuthenticationChallenge;
} CFURLProtocolClient;

typedef struct _CFURLProtectionSpace* CFURLProtectionSpaceRef;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct sqlite3* sqlite3Ref;

typedef struct _CFURLProtocol* CFURLProtocolRef;

typedef struct SmartBlockWithArgs<bool> {
	BlockHolderVar<bool> __ptr_;
	__shared_weak_count __cntrl_;
} SmartBlockWithArgs<bool>;

typedef struct weak_ptr<__CFURLCache> {
	__CFURLCache __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<__CFURLCache>;

typedef struct shared_ptr<TCPIO_EstablishBase> {
	TCPIO_EstablishBase __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TCPIO_EstablishBase>;

typedef struct shared_ptr<TCPIOConnectionObjCPP> {
	TCPIOConnectionObjCPP __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TCPIOConnectionObjCPP>;

typedef struct shared_ptr<HTTPProtocol> {
	HTTPProtocol __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<HTTPProtocol>;

typedef struct {
	long long domain;
	int error;
} SCD_Struct_NS24;

typedef struct __PerformanceTiming* PerformanceTimingRef;

typedef struct StreamTaskTestConfig {
	NSString* host;
	long long port;
	NSDictionary* proxyConfig;
	int connectionType;
	BOOL allowTimeout;
	BOOL allowTCPIOConnectionStreamTask;
} StreamTaskTestConfig;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, CoalescingConnectionKeyComparator, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, CoalescingConnectionKeyComparator, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::__map_value_compare<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, CoalescingConnectionKeyComparator, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, CoalescingConnectionKeyComparator, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::__map_value_compare<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, CoalescingConnectionKeyComparator, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > > > >;

typedef struct map<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > > > > {
	tree<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::__map_value_compare<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > >, CoalescingConnectionKeyComparator, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > > > > __tree_;
} map<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > > > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> > > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > > > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > >;

typedef struct CoalescingDomain {
	map<std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > _DNS;
	map<std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::set<std::__1::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::shared_ptr<__CoalescingConnectionKey> > > > > > _ipAddressToConnectionKey;
	map<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > > > > _connectionKeyToAllIPAddresses;
	map<std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<__CoalescingConnectionKey> > > > _requestHostToConnectionKey;
	map<std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >, CoalescingConnectionKeyComparator, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<__CoalescingConnectionKey>, std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > > > > _connectionKeyToAllRequestHosts;
} CoalescingDomain;

typedef struct {
	long long field1;
	int field2;
	unsigned field3;
	long long field4;
} SCD_Struct_NS45;

typedef struct {
	SCD_Struct_NS45 field1;
	SCD_Struct_NS45 field2;
} SCD_Struct_NS46;

typedef struct OpaqueCFHTTPCookie* OpaqueCFHTTPCookieRef;

typedef const struct __CFArray* CFArrayRef;

typedef struct timespec {
	long long tv_sec;
	long long tv_nsec;
} timespec;

typedef struct stat {
	int st_dev;
	unsigned short st_mode;
	unsigned short st_nlink;
	unsigned long long st_ino;
	unsigned st_uid;
	unsigned st_gid;
	int st_rdev;
	timespec st_atimespec;
	timespec st_mtimespec;
	timespec st_ctimespec;
	timespec st_birthtimespec;
	long long st_size;
	long long st_blocks;
	int st_blksize;
	unsigned st_flags;
	unsigned st_gen;
	int st_lspare;
	long long st_qspare[2];
} stat;

typedef struct {
	int field1;
	long long field2;
	BOOL field3;
	BOOL field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned long long field7;
	unsigned long long field8;
	unsigned long long field9;
	unsigned long long field10;
	unsigned char field11[16];
} SCD_Struct_NS51;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	unsigned long long field3;
	long long field4;
	long long field5;
	long long field6;
	unsigned long long field7;
	unsigned char field8[16];
	int field9;
	BOOL field10;
	unsigned long long field11;
	SCD_Struct_NS51 field12[0];
} SCD_Struct_NS52;

typedef struct __CFNetService* CFNetServiceRef;

typedef struct __CFNetServiceBrowser* CFNetServiceBrowserRef;

typedef struct shared_ptr<TLSServer> {
	TLSServer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TLSServer>;

typedef struct shared_ptr<__SecTrust> {
	__SecTrust __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<__SecTrust>;

typedef struct _CFURLCredentialStorage* CFURLCredentialStorageRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct OpaqueCFHTTPCookieStorage* OpaqueCFHTTPCookieStorageRef;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct _CFURLConnection* CFURLConnectionRef;

typedef struct _CFURLDownload* CFURLDownloadRef;

typedef struct __CFURL* CFURLRef;

typedef struct __CFError* CFErrorRef;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned long long total_in;
	char* next_out;
	unsigned avail_out;
	unsigned long long total_out;
	char* msg;
	internal_state state;
	/*function pointer*/void* zalloc;
	/*function pointer*/void* zfree;
	void opaque;
	int data_type;
	unsigned long long adler;
	unsigned long long reserved;
} z_stream_s;

typedef struct _CFURLCache* CFURLCacheRef;

typedef struct __CFURLStorageSession* CFURLStorageSessionRef;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct __CFSet* CFSetRef;

typedef struct SmartBlockWithArgs<NSURLSessionTaskMetrics *> {
	BlockHolderVar<NSURLSessionTaskMetrics *> __ptr_;
	__shared_weak_count __cntrl_;
} SmartBlockWithArgs<NSURLSessionTaskMetrics *>;

typedef struct SmartBlockWithArgs<bool, NSError *> {
	BlockHolderVar<bool, NSError *> __ptr_;
	__shared_weak_count __cntrl_;
} SmartBlockWithArgs<bool, NSError *>;

