/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:45:15 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/Frameworks/Vision.framework/Vision
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct shared_ptr<const vision::mod::FaceClustering> {
	FaceClustering __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const vision::mod::FaceClustering>;

typedef struct shared_ptr<vision::mod::FaceClustering> {
	FaceClustering __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceClustering>;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct __CVBuffer* CVBufferRef;

typedef struct shared_ptr<vision::mod::ImageClassifier_HierarchicalModel> {
	ImageClassifier_HierarchicalModel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageClassifier_HierarchicalModel>;

typedef struct shared_ptr<vision::mod::FaceClassifier_BoostedPixelDifference> {
	FaceClassifier_BoostedPixelDifference __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceClassifier_BoostedPixelDifference>;

typedef struct __IOSurface* IOSurfaceRef;

typedef struct CGImage* CGImageRef;

typedef struct shared_ptr<vision::mod::ObjectDetector_DCNFaceDetector_v2> {
	ObjectDetector_DCNFaceDetector_v2 __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ObjectDetector_DCNFaceDetector_v2>;

typedef struct Projections_meanStdTable {
	float sumTable;
	float sumSqTable;
} Projections_meanStdTable;

typedef struct FastRegistration_Signatures {
	float piRow;
	unsigned long long nPiRow;
	Projections_meanStdTable piRowTable;
	float piCol;
	unsigned long long nPiCol;
	Projections_meanStdTable piColTable;
	char* _memoryContainer;
} FastRegistration_Signatures;

typedef struct GridROI_t {
	int startX;
	int startY;
	int endX;
	int endY;
} GridROI_t;

typedef struct {
	[3 columns];
} SCD_Struct_VN15;

typedef struct ImageRegistrationCtx_s* ImageRegistrationCtx_sRef;

typedef struct {
	unsigned long long field1;
	Class field2;
	unsigned long long field3;
} SCD_Struct_VN17;

typedef struct {
	int field1;
	int field2;
} SCD_Struct_VN18;

typedef struct {
	unsigned long long field1;
	SCD_Struct_VN18 field2;
	SCD_Struct_VN18 field3;
	SCD_Struct_VN18 field4;
} SCD_Struct_VN19;

typedef struct vImage_Buffer {
	void data;
	unsigned long long height;
	unsigned long long width;
	unsigned long long rowBytes;
} vImage_Buffer;

typedef struct Geometry2D_point2D_ {
	float x;
	float y;
} Geometry2D_point2D_;

typedef struct Geometry2D_size2D_ {
	float height;
	float width;
} Geometry2D_size2D_;

typedef struct Geometry2D_rect2D_ {
	Geometry2D_point2D_ origin;
	Geometry2D_size2D_ size;
} Geometry2D_rect2D_;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct shared_ptr<vision::mod::LandmarkAttributes> {
	LandmarkAttributes __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::LandmarkAttributes>;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct __CFArray* CFArrayRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct shared_ptr<vision::mod::ObjectDetector_DCNFaceDetector> {
	ObjectDetector_DCNFaceDetector __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ObjectDetector_DCNFaceDetector>;

typedef struct TemplateObjectDetectorApplyiiiiB[2f][2f]fBBffifhoggradientChnsFeatiihoggradientgradientivector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> >DTreeApplyDTreeApply__compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> >DTreeApplyvector<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > >map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >__compressed_pair<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > *, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > >map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >vector<float, std::__1::allocator<float> >ff__compressed_pair<float *, std::__1::allocator<float> >fvector<vision::hum::DTreeNode *, std::__1::allocator<vision::hum::DTreeNode *> >DTreeNodeDTreeNode__compressed_pair<vision::hum::DTreeNode **, std::__1::allocator<vision::hum::DTreeNode *> >DTreeNodefadaBoostApplyvector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> >DTreeApplyDTreeApply__compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> >DTreeApplylinearSVMApplyvector<float, std::__1::allocator<float> >ff__compressed_pair<float *, std::__1::allocator<float> >ffvector<float, std::__1::allocator<float> >ff__compressed_pair<float *, std::__1::allocator<float> >f@* emplateObjectDetectorApplyRef;

typedef struct {
	void plan;
	int network_index;
} SCD_Struct_VN32;

typedef struct {
	void field1;
	void field2;
	unsigned long long field3[4];
	unsigned long long field4[4];
	unsigned long long field5;
	unsigned long long field6;
	unsigned long long field7;
	unsigned long long field8;
	unsigned long long field9;
	unsigned long long field10;
	unsigned long long field11;
	unsigned long long field12;
	unsigned long long field13;
	unsigned long long field14;
	int field15;
} SCD_Struct_VN33;

typedef struct shared_ptr<vision::mod::ImageDescriptorProcessorAbstract> {
	ImageDescriptorProcessorAbstract __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>;

typedef struct shared_ptr<vision::mod::ImageClassifierAbstract> {
	ImageClassifierAbstract __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageClassifierAbstract>;

typedef struct ACBSConfig* ACBSConfigRef;

typedef struct shared_ptr<vision::mod::FaceRegionMap> {
	FaceRegionMap __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceRegionMap>;

typedef struct {
	[4 field1];
} SCD_Struct_VN38;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct shared_ptr<vision::mod::FaceIDModel> {
	FaceIDModel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceIDModel>;

typedef struct shared_ptr<vision::mod::LandmarkDetector> {
	LandmarkDetector __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::LandmarkDetector>;

typedef struct _compressed_pair<cvml::util::model_file_cache *, std::__1::default_delete<cvml::util::model_file_cache> > {
	model_file_cache __value_;
} compressed_pair<cvml::util::model_file_cache *, std::__1::default_delete<cvml::util::model_file_cache> >;

typedef struct unique_ptr<cvml::util::model_file_cache, std::__1::default_delete<cvml::util::model_file_cache> > {
	compressed_pair<cvml::util::model_file_cache *, std::__1::default_delete<cvml::util::model_file_cache> > __ptr_;
} unique_ptr<cvml::util::model_file_cache, std::__1::default_delete<cvml::util::model_file_cache> >;

typedef struct shared_ptr<vision::mod::FaceFrontalizer> {
	FaceFrontalizer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceFrontalizer>;

typedef struct shared_ptr<vision::mod::ImageDescriptorAugmenterFlip> {
	ImageDescriptorAugmenterFlip __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageDescriptorAugmenterFlip>;

typedef struct shared_ptr<unsigned char> {
	char* __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<unsigned char>;

typedef struct shared_ptr<vision::mod::ImageAnalyzer> {
	ImageAnalyzer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageAnalyzer>;

typedef struct shared_ptr<vision::mod::FaceBoxPoseAligner<signed char> > {
	FaceBoxPoseAligner<signed char> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceBoxPoseAligner<signed char> >;

typedef struct shared_ptr<vision::mod::ObjectTrackerAbstract> {
	ObjectTrackerAbstract __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ObjectTrackerAbstract>;

typedef struct _compressed_pair<std::__1::shared_ptr<espresso_buffer_t> *, std::__1::allocator<std::__1::shared_ptr<espresso_buffer_t> > > {
	shared_ptr<espresso_buffer_t> __value_;
} compressed_pair<std::__1::shared_ptr<espresso_buffer_t> *, std::__1::allocator<std::__1::shared_ptr<espresso_buffer_t> > >;

typedef struct vector<std::__1::shared_ptr<espresso_buffer_t>, std::__1::allocator<std::__1::shared_ptr<espresso_buffer_t> > > {
	shared_ptr<espresso_buffer_t> __begin_;
	shared_ptr<espresso_buffer_t> __end_;
	compressed_pair<std::__1::shared_ptr<espresso_buffer_t> *, std::__1::allocator<std::__1::shared_ptr<espresso_buffer_t> > > __end_cap_;
} vector<std::__1::shared_ptr<espresso_buffer_t>, std::__1::allocator<std::__1::shared_ptr<espresso_buffer_t> > >;

