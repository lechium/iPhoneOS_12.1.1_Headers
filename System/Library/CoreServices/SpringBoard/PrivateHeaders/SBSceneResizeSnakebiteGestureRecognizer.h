//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "UIGestureRecognizer.h"

@class UITouch;

@interface SBSceneResizeSnakebiteGestureRecognizer : UIGestureRecognizer
{
    _Bool _beganTrackingNearDivider;	// 8 = 0x8
    _Bool _ignoresTouchesMoved;	// 9 = 0x9
    _Bool _waitingForInvalidTouchToBecomeValid;	// 10 = 0xa
    double _dividerPosition;	// 16 = 0x10
    double _velocity;	// 24 = 0x18
    double _distanceTraveledFromInitialLocation;	// 32 = 0x20
    double _absoluteDistanceTraveled;	// 40 = 0x28
    double _initialSingleTouchTimestamp;	// 48 = 0x30
    UITouch *_leftTouch;	// 56 = 0x38
    UITouch *_rightTouch;	// 64 = 0x40
    UITouch *_singleTrackingTouch;	// 72 = 0x48
    UITouch *_waitingTouch;	// 80 = 0x50
    double _previousTouchPosition;	// 88 = 0x58
    double _previousTouchTimestamp;	// 96 = 0x60
    id <SBSceneResizeSnakebiteGestureDebugDelegate> _debugDelegate;	// 104 = 0x68
    struct CGPoint _initialWaitingTouchLocation;	// 112 = 0x70
    struct CGPoint _initialTouchLocation;	// 128 = 0x80
}

@property(nonatomic) __weak id <SBSceneResizeSnakebiteGestureDebugDelegate> debugDelegate; // @synthesize debugDelegate=_debugDelegate;
@property(nonatomic, getter=isWaitingForInvalidTouchToBecomeValid) _Bool waitingForInvalidTouchToBecomeValid; // @synthesize waitingForInvalidTouchToBecomeValid=_waitingForInvalidTouchToBecomeValid;
@property(nonatomic) double previousTouchTimestamp; // @synthesize previousTouchTimestamp=_previousTouchTimestamp;
@property(nonatomic) double previousTouchPosition; // @synthesize previousTouchPosition=_previousTouchPosition;
@property(nonatomic) struct CGPoint initialTouchLocation; // @synthesize initialTouchLocation=_initialTouchLocation;
@property(nonatomic) struct CGPoint initialWaitingTouchLocation; // @synthesize initialWaitingTouchLocation=_initialWaitingTouchLocation;
@property(nonatomic, getter=_ignoresTouchesMoved, setter=_setIgnoresTouchesMoved:) _Bool ignoresTouchesMoved; // @synthesize ignoresTouchesMoved=_ignoresTouchesMoved;
@property(retain, nonatomic, getter=_waitingTouch, setter=_setWaitingTouch:) UITouch *waitingTouch; // @synthesize waitingTouch=_waitingTouch;
@property(retain, nonatomic, getter=_singleTrackingTouch, setter=_setSingleTrackingTouch:) UITouch *singleTrackingTouch; // @synthesize singleTrackingTouch=_singleTrackingTouch;
@property(retain, nonatomic, getter=_rightTouch, setter=_setRightTouch:) UITouch *rightTouch; // @synthesize rightTouch=_rightTouch;
@property(retain, nonatomic, getter=_leftTouch, setter=_setLeftTouch:) UITouch *leftTouch; // @synthesize leftTouch=_leftTouch;
@property(nonatomic) _Bool beganTrackingNearDivider; // @synthesize beganTrackingNearDivider=_beganTrackingNearDivider;
@property(nonatomic) double initialSingleTouchTimestamp; // @synthesize initialSingleTouchTimestamp=_initialSingleTouchTimestamp;
@property(nonatomic) double absoluteDistanceTraveled; // @synthesize absoluteDistanceTraveled=_absoluteDistanceTraveled;
@property(nonatomic) double distanceTraveledFromInitialLocation; // @synthesize distanceTraveledFromInitialLocation=_distanceTraveledFromInitialLocation;
@property(nonatomic) double velocity; // @synthesize velocity=_velocity;
@property(nonatomic, setter=_setDividerPosition:) double dividerPosition; // @synthesize dividerPosition=_dividerPosition;
- (void).cxx_destruct;	// IMP=0x0000000100508c40
- (void)_debugRegionsDidChange;	// IMP=0x0000000100508914
- (void)_stopDrawingDebugRegions;	// IMP=0x00000001005088dc
- (void)_drawDebugRegions;	// IMP=0x00000001005087f0
- (void)_updateStatsForTouchPosition:(double)arg1 timestamp:(double)arg2;	// IMP=0x0000000100508710
- (void)_handleTouchesMovedForSingleTouchTracking:(id)arg1 withEvent:(id)arg2;	// IMP=0x0000000100508514
- (void)_handleTouchesMovedForMultipleTouchTracking:(id)arg1 withEvent:(id)arg2;	// IMP=0x0000000100508284
- (void)_clearTrackingTouches;	// IMP=0x0000000100508180
- (_Bool)_shouldContinueTrackingInvalidTouchWithDistanceFromDivider:(double)arg1;	// IMP=0x000000010050811c
- (_Bool)_shouldConsiderSingleTouchTrackingAsFailed;	// IMP=0x0000000100507fd0
- (void)_startTrackingWithSingleTouch:(id)arg1;	// IMP=0x0000000100507cf0
- (_Bool)_canStartAnyKindOfTrackingWithTouch:(id)arg1;	// IMP=0x0000000100507afc
- (void)_startTrackingWithTouch:(id)arg1 andTouch:(id)arg2;	// IMP=0x000000010050753c
- (_Bool)_checkOngoingValidityOfLeftTouch:(id)arg1 rightTouch:(id)arg2;	// IMP=0x000000010050739c
- (_Bool)_checkInitialValidityOfTouch:(id)arg1 andTouch:(id)arg2;	// IMP=0x0000000100506dd4
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;	// IMP=0x0000000100506d78
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;	// IMP=0x0000000100506cc0
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;	// IMP=0x0000000100506a54
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;	// IMP=0x0000000100506148
- (struct CGPoint)interfaceOrientedLocationInView:(id)arg1;	// IMP=0x0000000100506114
- (_Bool)willAllowResizeForSingleTouch:(id)arg1;	// IMP=0x0000000100506034
- (_Bool)_singleTouchStartedInPinningAreaWithLocation:(struct CGPoint)arg1;	// IMP=0x0000000100505fa8
- (_Bool)_shouldStartTrackingSingleTouchAtLocation:(struct CGPoint)arg1 distanceFromDivider:(double)arg2;	// IMP=0x0000000100505efc
- (double)_viewOffsetForNormalizedLocation:(double)arg1;	// IMP=0x0000000100505e98
- (double)_normalizedLocationForViewOffset:(double)arg1;	// IMP=0x0000000100505e34
- (double)_dividerViewOffset;	// IMP=0x0000000100505dcc
- (struct CGRect)_interfaceOrientedBounds;	// IMP=0x0000000100505d34
- (struct CGPoint)_interfaceOrientedPoint:(struct CGPoint)arg1;	// IMP=0x0000000100505ce4
- (struct CGRect)_convertViewRect:(struct CGRect)arg1 toInterfaceOrientation:(long long)arg2;	// IMP=0x0000000100505ccc
- (struct CGPoint)_convertViewPoint:(struct CGPoint)arg1 toInterfaceOrientation:(long long)arg2;	// IMP=0x0000000100505b80
- (long long)_interfaceOrientation;	// IMP=0x0000000100505b2c

// Remaining properties
@property(nonatomic) __weak id <SBSceneResizeSnakebiteGestureRecognizerDelegate> delegate; // @dynamic delegate;

@end

