//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "UIGestureRecognizer.h"

#import "_UISettingsKeyObserver.h"

@class NSArray, NSMutableSet, NSString, UIEvent;

@interface SBHorizontalScrollFailureRecognizer : UIGestureRecognizer <_UISettingsKeyObserver>
{
    struct CGPoint _startingLocation;	// 8 = 0x8
    unsigned long long _maxAllowableVerticalOffset;	// 24 = 0x18
    double _maxAllowedTopAngle;	// 32 = 0x20
    double _minAllowedTopAngle;	// 40 = 0x28
    double _effectiveTopAngle;	// 48 = 0x30
    double _minAllowedBottomAngle;	// 56 = 0x38
    double _maxAllowedBottomAngle;	// 64 = 0x40
    double _effectiveBottomAngle;	// 72 = 0x48
    NSMutableSet *_touches;	// 80 = 0x50
    _Bool _tracking;	// 88 = 0x58
    _Bool _allowMultiTouch;	// 89 = 0x59
    _Bool _viewDebugArea;	// 90 = 0x5a
    _Bool _runningAsSystemGesture;	// 91 = 0x5b
    NSArray *_debugViews;	// 96 = 0x60
    UIEvent *_triggeredEvent;	// 104 = 0x68
}

@property(readonly, nonatomic) UIEvent *triggeredEvent; // @synthesize triggeredEvent=_triggeredEvent;
@property(nonatomic, getter=isRunningAsSystemGesture) _Bool runningAsSystemGesture; // @synthesize runningAsSystemGesture=_runningAsSystemGesture;
@property(nonatomic) _Bool viewDebugArea; // @synthesize viewDebugArea=_viewDebugArea;
@property(nonatomic) double minAllowedBottomAngle; // @synthesize minAllowedBottomAngle=_minAllowedBottomAngle;
@property(nonatomic) double maxAllowedBottomAngle; // @synthesize maxAllowedBottomAngle=_maxAllowedBottomAngle;
@property(nonatomic) double minAllowedTopAngle; // @synthesize minAllowedTopAngle=_minAllowedTopAngle;
@property(nonatomic) double maxAllowedTopAngle; // @synthesize maxAllowedTopAngle=_maxAllowedTopAngle;
@property(nonatomic) unsigned long long maxAllowableVerticalOffset; // @synthesize maxAllowableVerticalOffset=_maxAllowableVerticalOffset;
@property(nonatomic) _Bool allowMultiTouch; // @synthesize allowMultiTouch=_allowMultiTouch;
- (void).cxx_destruct;	// IMP=0x0000000100009acc
- (void)_setDebugViewsVisible:(_Bool)arg1;	// IMP=0x000000010000954c
- (_Bool)canBePreventedByGestureRecognizer:(id)arg1;	// IMP=0x0000000100009544
- (_Bool)_isLocationOutOfBounds:(struct CGPoint)arg1;	// IMP=0x00000001000094f8
- (_Bool)_isOutOfBounds:(struct CGPoint)arg1 forAngle:(double)arg2;	// IMP=0x0000000100009440
- (double)_maxAllowableVerticalOffsetForPoint:(struct CGPoint)arg1;	// IMP=0x00000001000092ec
- (_Bool)_isOutOfBoundsVertically:(struct CGPoint)arg1;	// IMP=0x00000001000092a4
- (double)_computeEffectiveAngleFromMin:(double)arg1 max:(double)arg2;	// IMP=0x0000000100009218
- (struct CGPoint)_averagePointFromTouches;	// IMP=0x0000000100008f1c
- (long long)_activeTouchCountForEvent:(id)arg1;	// IMP=0x0000000100008dec
- (void)_loadFromSettings:(id)arg1;	// IMP=0x0000000100008cb4
- (id)_touchesFromEvent:(id)arg1;	// IMP=0x0000000100008c9c
- (struct CGPoint)_locationOfTouch:(id)arg1 inView:(id)arg2;	// IMP=0x0000000100008aac
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;	// IMP=0x0000000100008a6c
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;	// IMP=0x000000010000884c
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;	// IMP=0x0000000100008604
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;	// IMP=0x0000000100008398
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;	// IMP=0x00000001000080d8
- (_Bool)_recognizeForMultiTouchIfNecessary:(id)arg1;	// IMP=0x0000000100007c08
- (void)reset;	// IMP=0x0000000100007b4c
- (void)setState:(long long)arg1;	// IMP=0x0000000100007aec
- (double)_effectiveBottomAngle;	// IMP=0x0000000100007adc
- (double)_effectiveTopAngle;	// IMP=0x0000000100007acc
- (id)_safeRelativeView;	// IMP=0x0000000100007a70
- (void)dealloc;	// IMP=0x0000000100007a1c
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;	// IMP=0x0000000100007864

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) __weak id <SBSystemGestureRecognizerDelegate> delegate; // @dynamic delegate;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

