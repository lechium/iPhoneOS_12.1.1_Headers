/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:44:13 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MediaRemote/MRExternalDevice.h>
#import <libobjc.A.dylib/MRAVDistantExternalDeviceClientProtocol.h>

@protocol OS_dispatch_queue;
@class NSObject, MRAVDistantExternalDeviceMetadata, NSXPCConnection, _MROriginProtobuf, NSXPCListenerEndpoint, NSString;

@interface MRDistantExternalDevice : MRExternalDevice <MRAVDistantExternalDeviceClientProtocol> {

	NSObject*<OS_dispatch_queue> _serialQueue;
	MRAVDistantExternalDeviceMetadata* _externalDeviceMetadata;
	NSXPCConnection* _hostedExternalDeviceConnection;
	unsigned long long _callbacks;
	unsigned long long _deviceNotifications;
	unsigned _connectionState;
	_MROriginProtobuf* _customOrigin;
	BOOL _hasEverAttemptedToConnect;
	/*^block*/id _connectionStateCallback;
	NSObject*<OS_dispatch_queue> _connectionStateCallbackQueue;
	/*^block*/id _nameCallback;
	NSObject*<OS_dispatch_queue> _nameCallbackQueue;
	/*^block*/id _customDataCallback;
	NSObject*<OS_dispatch_queue> _customDataCallbackQueue;
	/*^block*/id _volumeCallback;
	NSObject*<OS_dispatch_queue> _volumeCallbackQueue;

}

@property (nonatomic,copy) id connectionStateCallback;                                               //@synthesize connectionStateCallback=_connectionStateCallback - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> connectionStateCallbackQueue;              //@synthesize connectionStateCallbackQueue=_connectionStateCallbackQueue - In the implementation block
@property (nonatomic,copy) id nameCallback;                                                          //@synthesize nameCallback=_nameCallback - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> nameCallbackQueue;                         //@synthesize nameCallbackQueue=_nameCallbackQueue - In the implementation block
@property (nonatomic,copy) id customDataCallback;                                                    //@synthesize customDataCallback=_customDataCallback - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> customDataCallbackQueue;                   //@synthesize customDataCallbackQueue=_customDataCallbackQueue - In the implementation block
@property (nonatomic,copy) id volumeCallback;                                                        //@synthesize volumeCallback=_volumeCallback - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> volumeCallbackQueue;                       //@synthesize volumeCallbackQueue=_volumeCallbackQueue - In the implementation block
@property (nonatomic,readonly) NSXPCListenerEndpoint * listenerEndpoint; 
@property (nonatomic,readonly) BOOL hasEverAttemptedToConnect;                                       //@synthesize hasEverAttemptedToConnect=_hasEverAttemptedToConnect - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)serviceInterface;
+(id)_notificationSerialQueue;
+(id)clientInterface;
-(id)hostName;
-(void)outputDeviceVolume:(id)arg1 queue:(id)arg2 completion:(/*^block*/id)arg3 ;
-(id)supportedMessages;
-(void)connectWithOptions:(unsigned)arg1 ;
-(void)unpair;
-(void)sendCustomData:(id)arg1 withName:(id)arg2 ;
-(void)hostedExternalDeviceConnectionStateDidChange:(unsigned)arg1 withError:(id)arg2 ;
-(void)hostedExternalDeviceNameDidChange:(id)arg1 ;
-(void)hostedExternalDeviceDidReceiveCustomData:(id)arg1 withName:(id)arg2 ;
-(void)hostedExternalDeviceVolumeDidChange:(float)arg1 forEndpointWithIdentifier:(id)arg2 forOutputDeviceWithIdentifier:(id)arg3 ;
-(void)hostedExternalDeviceEndpointDidChange:(id)arg1 ;
-(void)_handleDeviceInfoDidChange:(id)arg1 ;
-(void)_updateHostedDeviceDesiredNotifications;
-(id)_hostedExternalDeviceConnection;
-(void)_onSerialQueue_synchronousLoadExternalDeviceMetadataIfNecessary;
-(void)setConnectionStateCallback:(id)arg1 ;
-(void)setConnectionStateCallbackQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)_updateHostedDeviceDesiredCallbacks;
-(void)setNameCallback:(id)arg1 ;
-(void)setNameCallbackQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setCustomDataCallback:(id)arg1 ;
-(void)setCustomDataCallbackQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setVolumeCallback:(id)arg1 ;
-(void)setVolumeCallbackQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(id)connectionStateCallback;
-(NSObject*<OS_dispatch_queue>)connectionStateCallbackQueue;
-(NSObject*<OS_dispatch_queue>)nameCallbackQueue;
-(id)nameCallback;
-(NSObject*<OS_dispatch_queue>)customDataCallbackQueue;
-(id)customDataCallback;
-(NSObject*<OS_dispatch_queue>)volumeCallbackQueue;
-(id)volumeCallback;
-(id)initWithExternalDeviceListenerEndpoint:(id)arg1 ;
-(BOOL)wantsNowPlayingNotifications;
-(void)setWantsNowPlayingNotifications:(BOOL)arg1 ;
-(BOOL)wantsVolumeNotifications;
-(void)setWantsVolumeNotifications:(BOOL)arg1 ;
-(BOOL)wantsOutputDeviceNotifications;
-(void)setWantsOutputDeviceNotifications:(BOOL)arg1 ;
-(BOOL)isUsingSystemPairing;
-(id)customOrigin;
-(void)setPairingCallback:(/*^block*/id)arg1 withQueue:(id)arg2 ;
-(void)setConnectionStateCallback:(/*^block*/id)arg1 withQueue:(id)arg2 ;
-(void)setNameCallback:(/*^block*/id)arg1 withQueue:(id)arg2 ;
-(void)setPairingAllowedCallback:(/*^block*/id)arg1 withQueue:(id)arg2 ;
-(void)setCustomDataCallback:(/*^block*/id)arg1 withQueue:(id)arg2 ;
-(void)setVolumeCallback:(/*^block*/id)arg1 withQueue:(id)arg2 ;
-(void)setOutputDeviceVolume:(float)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)outputDeviceVolumeControlCapabilities:(id)arg1 queue:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)modifyOutputContextOfType:(unsigned)arg1 addingDeviceUIDs:(id)arg2 removingDeviceUIDs:(id)arg3 settingDeviceUIDs:(id)arg4 withReplyQueue:(id)arg5 completion:(/*^block*/id)arg6 ;
-(void)ping:(double)arg1 callback:(/*^block*/id)arg2 withQueue:(id)arg3 ;
-(BOOL)hasEverAttemptedToConnect;
-(void)disconnect:(id)arg1 ;
-(id)_remoteObjectProxyWithErrorHandler:(/*^block*/id)arg1 ;
-(unsigned)connectionState;
-(id)deviceInfo;
-(NSXPCListenerEndpoint *)listenerEndpoint;
-(BOOL)isPaired;
-(void)dealloc;
-(id)name;
-(BOOL)isValid;
-(long long)port;
@end

