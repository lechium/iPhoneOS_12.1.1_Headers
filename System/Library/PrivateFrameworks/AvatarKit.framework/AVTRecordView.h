/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:50:38 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AvatarKit/AvatarKit-Structs.h>
#import <AvatarKit/AVTView.h>
#import <libobjc.A.dylib/AVTFaceTrackerDelegate.h>

@protocol AVTRecordViewDelegate, OS_dispatch_queue;
@class NSObject, CAAnimation, NSMutableData, CAAnimationGroup, AVCaptureMovieFileOutput, AVPlayer, AVAssetWriterInput, AVAssetWriter, NSLock, NSMutableArray, CALayer, NSString;

@interface AVTRecordView : AVTView <AVTFaceTrackerDelegate> {

	id<AVTRecordViewDelegate> _recordDelegate;
	BOOL _exportingMovie;
	BOOL _recording;
	int _isFading;
	NSObject*<OS_dispatch_queue> _preloadQueue;
	CAAnimation* _backedAnimation;
	BOOL _playBackedAnimation;
	BOOL _disableRendering;
	double _actionT0;
	BOOL _actionStarted;
	float _maxRecordingDuration;
	NSMutableData* _rawTimesData;
	NSMutableData* _rawBlendShapesData;
	NSMutableData* _rawTransformsData;
	NSMutableData* _rawParametersData;
	int _recordedCount;
	int _recordingCapacity;
	CAAnimationGroup* _recordedAnimationGroup;
	AVCaptureMovieFileOutput* _movieFileOutput;
	AVPlayer* _audioPlayer;
	AVAssetWriterInput* _audioWriterInput;
	AVAssetWriter* _audioWriter;
	NSLock* _audioLock;
	SCD_Struct_AV14 _currentAudioTime;
	SCD_Struct_AV14 _startAudioTime;
	SCD_Struct_AV14 _stopAudioTime;
	long long _recordedSampleCount;
	BOOL _audioIsRecording;
	double _lastAudioPlayerTime;
	double _lastAudioSystemTime;
	BOOL _playing;
	BOOL _mute;
	BOOL _transitioningFromSnapshot;
	double _t0;
	int _benchFrameCounter;
	BOOL _doubleBuffer;
	BOOL _checkDrawableAvailable;
	NSMutableArray* _droppedDoubleBufferFrames;
	long long _preferredFramesPerSecond_user;
	long long _preferredFramesPerSecond_thermal;
	CALayer* _backingLayer;

}

@property (assign,nonatomic,__weak) id<AVTRecordViewDelegate> recordDelegate;              //@synthesize recordDelegate=_recordDelegate - In the implementation block
@property (getter=isRecording,nonatomic,readonly) BOOL recording;                          //@synthesize recording=_recording - In the implementation block
@property (getter=isPreviewing,nonatomic,readonly) BOOL previewing; 
@property (assign,nonatomic) BOOL mute;                                                    //@synthesize mute=_mute - In the implementation block
@property (assign,nonatomic) float maxRecordingDuration; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(BOOL)usesInternalTrackingPipeline;
+(void)setUsesInternalTrackingPipeline:(BOOL)arg1 ;
-(void)setAvatar:(id)arg1 ;
-(void)setMute:(BOOL)arg1 ;
-(BOOL)mute;
-(long long)preferredFramesPerSecond;
-(double)_renderer:(id)arg1 inputTimeForCurrentFrameWithTime:(double)arg2 ;
-(void)_drawAtTime:(double)arg1 ;
-(BOOL)disableRendering;
-(BOOL)isRecording;
-(void)cancelRecording;
-(void)stopPlayingAudio;
-(void)stopRecording;
-(void)setRecordDelegate:(id<AVTRecordViewDelegate>)arg1 ;
-(void)startRecording;
-(void)audioSessionInterruption:(id)arg1 ;
-(BOOL)recording;
-(void)updateAtTime:(double)arg1 ;
-(BOOL)isDoubleBuffered;
-(id)faceTrackingRecordingURL;
-(void)faceTracker:(id)arg1 sessionWasInterrupted:(id)arg2 ;
-(void)faceTracker:(id)arg1 sessionInterruptionEnded:(id)arg2 ;
-(void)faceTracker:(id)arg1 session:(id)arg2 didOutputAudioSampleBuffer:(opaqueCMSampleBufferRef)arg3 ;
-(void)faceTrackerDidUpdate:(id)arg1 trackingInfo:(id)arg2 ;
-(void)faceTracker:(id)arg1 session:(id)arg2 didFailWithError:(id)arg3 ;
-(void)setFaceTrackingRecordingURL:(id)arg1 ;
-(id)puppetState;
-(void)setPuppetState:(id)arg1 ;
-(void)_avt_commonInit;
-(void)didLostTrackingForAWhile;
-(void)willUpdateAvatarWithNewFaceTrackingData:(double)arg1 ;
-(BOOL)allowTrackSmoothing;
-(void)avatarDidChange;
-(void)updateForChangedFaceTrackingPaused;
-(double)currentAudioTime;
-(BOOL)faceIsFullyActive;
-(void)fadePuppetToWhite:(float)arg1 ;
-(void)_processInfoThermalStateDidChange:(id)arg1 ;
-(void)_updateFrameRateForThermalState:(long long)arg1 ;
-(void)_setEffectivePreferredFramesPerSecond;
-(id<AVTRecordViewDelegate>)recordDelegate;
-(void)_didUpdateAtTime:(double)arg1 ;
-(void)cancelRecordingAudio;
-(void)startRecordingAudio;
-(void)stopRecordingAudio;
-(void)trimRecordedData;
-(void)finalizeAudioFile;
-(void)_smoothRecordedData;
-(id)convertRecordedDataToAnimationGroup;
-(void)_playLivePreviewAnimation;
-(void)updateAudioState;
-(void)_updateTrackingState;
-(void)startPlayingAudio;
-(double)recordingDuration;
-(id)_tmpVideoURL;
-(id)_tmpAudioURL;
-(BOOL)mergeAudio:(id)arg1 andVideoTo:(id)arg2 error:(id*)arg3 ;
-(double)finalVideoDuration;
-(opaqueCMSampleBufferRef)createSilentAudioAtFrame:(long long)arg1 nFrames:(int)arg2 sampleRate:(double)arg3 numChannels:(int)arg4 ;
-(void)updateMuteState;
-(void)audioPlayerItemDidReachEnd:(id)arg1 ;
-(void)drawableNotAvailableForTime:(double)arg1 ;
-(void)playPreviewOnce;
-(BOOL)playBakedAnimation;
-(void)setPlayBakedAnimation:(BOOL)arg1 ;
-(void)setDisableRendering:(BOOL)arg1 ;
-(float)maxRecordingDuration;
-(void)setMaxRecordingDuration:(float)arg1 ;
-(id)_tmpMaskVideoURL;
-(BOOL)exportMovieToURL:(id)arg1 options:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)cancelMovieExport;
-(id)initWithFrame:(CGRect)arg1 options:(id)arg2 ;
-(void)setFaceTrackingPaused:(BOOL)arg1 ;
-(void)stopPreviewing;
-(void)startPreviewing;
-(void)renderer:(id)arg1 updateAtTime:(double)arg2 ;
-(id)init;
-(void)dealloc;
-(id)initWithCoder:(id)arg1 ;
-(id)initWithFrame:(CGRect)arg1 ;
-(void)setPreferredFramesPerSecond:(long long)arg1 ;
-(BOOL)isPreviewing;
@end

