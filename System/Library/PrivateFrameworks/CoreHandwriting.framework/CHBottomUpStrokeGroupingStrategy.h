/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:46:31 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CoreHandwriting/CoreHandwriting-Structs.h>
#import <CoreHandwriting/CHStrokeGroupingStrategy.h>

@interface CHBottomUpStrokeGroupingStrategy : CHStrokeGroupingStrategy
+(CGRect)_boundingBoxOfPoints:(const vector<CGPoint, std::__1::allocator<CGPoint> >*)arg1 rotatedAroundPoint:(CGPoint)arg2 byAngle:(double)arg3 ;
+(double)_lineOrientationForStrokePoints:(const vector<CGPoint, std::__1::allocator<CGPoint> >*)arg1 error:(double*)arg2 ;
+(double)_containerSupportForPoints:(const vector<CGPoint, std::__1::allocator<CGPoint> >*)arg1 withBounds:(CGRect)arg2 ;
+(double)_circumferenceRatioOfCircleFittedToPoints:(list<CGPoint, std::__1::allocator<CGPoint> >*)arg1 circleCenter:(CGPoint*)arg2 circleRadius:(double*)arg3 ;
+(vector<CGPoint, std::__1::allocator<CGPoint> >*)_convexHullForPoints:(vector<CGPoint, std::__1::allocator<CGPoint> >*)arg1 ;
+(double)_vectorMeanWithoutOutliers:(vector<double, std::__1::allocator<double> >*)arg1 ;
+(vector<CGRect, std::__1::allocator<CGRect> >*)_boundingBoxesOfStrokesInGroup:(id)arg1 rotatedAroundPoint:(CGPoint)arg2 byAngle:(double)arg3 ;
+(CGRect)_unionStrokeBounds:(const vector<CGRect, std::__1::allocator<CGRect> >*)arg1 usingStrokeCountLimit:(long long)arg2 reverseOrder:(BOOL)arg3 ;
+(CGRect)_unionStrokeBounds:(const vector<CGRect, std::__1::allocator<CGRect> >*)arg1 aroundXPosition:(double)arg2 usingOneSideStrokeCountLimit:(long long)arg3 ;
+(vector<CGPoint, std::__1::allocator<CGPoint> >*)_convexHullForStroke:(id)arg1 ;
-(id)initWithStrokeProvider:(id)arg1 sessionLastResult:(id)arg2 locales:(id)arg3 ;
-(id)updatedGroupingResultWithCancellationBlock:(/*^block*/id)arg1 ;
-(id)recognizableDrawingForStrokeGroup:(id)arg1 orderedStrokesIDs:(id*)arg2 ;
-(void)_updateNontextCandidates:(id)arg1 byRemovingStrokeIdentifiers:(id)arg2 substrokesByStrokeIdentifier:(id)arg3 reinsertedStrokes:(id)arg4 removedNontextStrokeIdentifiers:(id)arg5 nontextGroups:(id)arg6 createdGroups:(id)arg7 deletedGroups:(id)arg8 cancellationBlock:(/*^block*/id)arg9 ;
-(void)_updateNontextCandidates:(id)arg1 byAddingStrokes:(id)arg2 substrokesByStrokeIdentifier:(id)arg3 newNontextStrokeIdentifiers:(id)arg4 textGroups:(id)arg5 nontextGroups:(id)arg6 nontextGroupsSnapshot:(id)arg7 createdGroups:(id)arg8 cancellationBlock:(/*^block*/id)arg9 ;
-(void)_updateTextGroups:(id)arg1 createdGroups:(id)arg2 deletedGroups:(id)arg3 forAddedStroke:(id)arg4 substrokesByStrokeIdentifier:(id)arg5 cancellationBlock:(/*^block*/id)arg6 ;
-(void)_mergeGroupsPostProcessing:(id)arg1 createdGroups:(id)arg2 deletedGroups:(id)arg3 ;
-(void)_updateNontextGroups:(id)arg1 createdGroups:(id)arg2 deletedGroups:(id)arg3 byRemovingStrokeIdentifier:(id)arg4 ;
-(id)_substrokesForStroke:(id)arg1 ;
-(void)_updateNontextCandidateSupport:(id)arg1 withStroke:(id)arg2 substrokesByStrokeIdentifier:(id)arg3 nontextStrokeIdentifiers:(id)arg4 nontextGroups:(id)arg5 createdGroups:(id)arg6 ;
-(void)_getMergingLowerBoundCost:(double*)arg1 withStrokeBounds:(CGRect)arg2 toLineGroup:(id)arg3 ;
-(void)_getMergingEndOfLineCost:(double*)arg1 mergingEndOfLineStroke:(id*)arg2 forStroke:(id)arg3 consistingOfSubstrokes:(id)arg4 toLineGroup:(id)arg5 ;
-(long long)_compareDistanceInWritingSequenceOfStroke:(id)arg1 andStroke:(id)arg2 toReferenceStroke:(id)arg3 ;
-(void)_getMergingMiddleOfLineCost:(double*)arg1 mergingMiddleOfLineStroke:(id*)arg2 forStroke:(id)arg3 consistingOfSubstrokes:(id)arg4 toLineGroup:(id)arg5 ;
-(void)_estimateWritingDirectionAndSortSubstrokesAccordingly:(id)arg1 averageWritingOrientation:(CGVector*)arg2 averageStrokeDeviation:(CGVector*)arg3 ;
-(id)_writingDirectionSortedStrokeIdentifiersFromSubstrokes:(id)arg1 localWritingOrientations:(vector<CGVector, std::__1::allocator<CGVector> >*)arg2 ;
-(double)_scaleFactorForBoundsHeight:(double)arg1 ;
-(CGVector)_averageVectorFromSubstroke:(id)arg1 toSubstroke:(id)arg2 withOrientation:(CGVector)arg3 strokeRef:(id)arg4 strokeDest:(id)arg5 ;
-(void)_updateLocalWritingOrientationsForSubstrokes:(id)arg1 useCoalescedCenter:(BOOL)arg2 ;
-(void)_sortSubstrokesByWritingDirection:(id)arg1 averageWritingOrientation:(CGVector*)arg2 ;
-(void)_refineLocalWritingOrientationsForSubstrokes:(id)arg1 useCoalescedCenter:(BOOL)arg2 ;
-(BOOL)_refineWritingOrientationAndResortSubstrokes:(id)arg1 averageWritingOrientation:(CGVector*)arg2 ;
-(void)_updateLocalStrokeDeviationsForSubstrokes:(id)arg1 averageStrokeDeviation:(CGVector*)arg2 ;
-(void)_smoothLocalWritingOrientations:(vector<CGVector, std::__1::allocator<CGVector> >*)arg1 ;
-(vector<CGPoint, std::__1::allocator<CGPoint> >*)_flippedCenters:(const vector<CGPoint, std::__1::allocator<CGPoint> >*)arg1 ofSubstrokes:(id)arg2 maxStrokesGap:(long long)arg3 begnning:(BOOL)arg4 ;
-(id)averageAngleAndReliabilityForStrokeGroup:(id)arg1 ;
-(double)_verticalOffsetForBoundsHeight:(double)arg1 andScaleFactor:(double)arg2 ;
-(BOOL)_isStrokeClassifiedAsDoodling:(id)arg1 withSubstrokes:(id)arg2 ;
@end

