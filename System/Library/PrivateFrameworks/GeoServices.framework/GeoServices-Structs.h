/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:43:41 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned appErrorCode : 1;
} SCD_Struct_GE1;

typedef struct {
	int list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE2;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_GE3;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct GEOOnce_s {
	os_unfair_lock_s lock;
	BOOL didRun;
} GEOOnce_s;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<geo::TransitEdgePiece> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<geo::TransitEdgePiece> >;

typedef struct _compressed_pair<float, std::__1::equal_to<geo::TransitEdgePiece> > {
	float __value_;
} compressed_pair<float, std::__1::equal_to<geo::TransitEdgePiece> >;

typedef struct _hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> {
	__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *>, std::__1::allocator<std::__1::__hash_node<geo::TransitEdgePiece, void *> > > {
	hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *>, std::__1::allocator<std::__1::__hash_node<geo::TransitEdgePiece, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > >;

typedef struct _hash_table<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *>, std::__1::allocator<std::__1::__hash_node<geo::TransitEdgePiece, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<geo::TransitEdgePiece> > __p2_;
	compressed_pair<float, std::__1::equal_to<geo::TransitEdgePiece> > __p3_;
} hash_table<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece> >;

typedef struct unordered_set<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece> > {
	hash_table<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece> > __table_;
} unordered_set<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece> >;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct GEOSessionID {
	unsigned long long _high;
	unsigned long long _low;
} GEOSessionID;

typedef struct {
	unsigned sessionID : 1;
	unsigned clientImgFmt : 1;
	unsigned clientImgMaxHeight : 1;
	unsigned clientImgMaxWidth : 1;
	unsigned mapCenterX : 1;
	unsigned mapCenterY : 1;
	unsigned mapSpanX : 1;
	unsigned mapSpanY : 1;
	unsigned requestType : 1;
	unsigned tilesizeX : 1;
	unsigned tilesizeY : 1;
	unsigned zoomlevel : 1;
} SCD_Struct_GE18;

typedef struct {
	unsigned statusIssue : 1;
	unsigned bookedUsingMaps : 1;
	unsigned cancelled : 1;
	unsigned contactedDriver : 1;
	unsigned invalidVehicleLocation : 1;
	unsigned missingVehicleLocation : 1;
	unsigned tappedProactiveTrayItem : 1;
	unsigned viewedDetails : 1;
	unsigned viewedInProactiveTray : 1;
} SCD_Struct_LO19;

typedef struct {
	unsigned list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE20;

typedef struct {
	unsigned bytesInActive : 1;
	unsigned bytesInTotal : 1;
	unsigned bytesOutActive : 1;
	unsigned bytesOutTotal : 1;
	unsigned dataStalls : 1;
	unsigned failedConnections : 1;
	unsigned faultyStay : 1;
	unsigned lat : 1;
	unsigned lon : 1;
	unsigned lowLQMStay : 1;
	unsigned lowqStay : 1;
	unsigned lqmTranCount : 1;
	unsigned overAllStay : 1;
	unsigned packetsIn : 1;
	unsigned packetsOut : 1;
	unsigned reTxBytes : 1;
	unsigned receivedDupes : 1;
	unsigned rxOutOfOrderBytes : 1;
	unsigned successfulConnections : 1;
	unsigned timeOfDay : 1;
	unsigned timestamp : 1;
	unsigned assocReason : 1;
	unsigned associatedTime : 1;
	unsigned associationLength : 1;
	unsigned associationReason : 1;
	unsigned band : 1;
	unsigned captiveDetermination : 1;
	unsigned captiveFlag : 1;
	unsigned cca : 1;
	unsigned channel : 1;
	unsigned channelWidth : 1;
	unsigned colocatedState : 1;
	unsigned disassocReason : 1;
	unsigned disassociationReason : 1;
	unsigned networkOrigin : 1;
	unsigned networkType : 1;
	unsigned phyMode : 1;
	unsigned roundTripTimeAvg : 1;
	unsigned roundTripTimeAvgActive : 1;
	unsigned roundTripTimeMin : 1;
	unsigned roundTripTimeMinActive : 1;
	unsigned roundTripTimeVar : 1;
	unsigned roundTripTimeVarActive : 1;
	unsigned rssi : 1;
	unsigned securityType : 1;
	unsigned snr : 1;
	unsigned topDLRate : 1;
	unsigned wasCaptiveFlag : 1;
	unsigned hotspot20 : 1;
	unsigned isEdgeBSS : 1;
	unsigned isKnownGood : 1;
	unsigned lowInternetDL : 1;
	unsigned lowInternetUL : 1;
} SCD_Struct_GE21;

typedef struct {
	unsigned responseTime : 1;
	unsigned isVerified : 1;
} SCD_Struct_GE22;

typedef struct {
	unsigned numberOfLegs : 1;
	unsigned paymentType : 1;
	unsigned cashOnly : 1;
} SCD_Struct_GE23;

typedef struct {
	unsigned field1[4];
} SCD_Struct_GE24;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *> > >;

typedef struct _list_node_base<LoadItem, void *> {
	__list_node_base<LoadItem, void *> __prev_;
	__list_node_base<LoadItem, void *> __next_;
} list_node_base<LoadItem, void *>;

typedef struct list<LoadItem, std::__1::allocator<LoadItem> > {
	list_node_base<LoadItem, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *> > > __size_alloc_;
} list<LoadItem, std::__1::allocator<LoadItem> >;

typedef struct _compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer> > {
	DispatchTimer __value_;
} compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer> >;

typedef struct unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer> > {
	compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer> > __ptr_;
} unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer> >;

typedef struct {
	double x;
	double y;
} SCD_Struct_GE30;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<_CacheRequester<void ()(unsigned long long)>, void *> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<_CacheRequester<void ()(unsigned long long)>, void *> > >;

typedef struct _list_node_base<_CacheRequester<void ()(unsigned long long)>, void *> {
	__list_node_base<_CacheRequester<void ()(unsigned long long)>, void *> __prev_;
	__list_node_base<_CacheRequester<void ()(unsigned long long)>, void *> __next_;
} list_node_base<_CacheRequester<void ()(unsigned long long)>, void *>;

typedef struct list<_CacheRequester<void ()(unsigned long long)>, std::__1::allocator<_CacheRequester<void ()(unsigned long long)> > > {
	list_node_base<_CacheRequester<void ()(unsigned long long)>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<_CacheRequester<void ()(unsigned long long)>, void *> > > __size_alloc_;
} list<_CacheRequester<void ()(unsigned long long)>, std::__1::allocator<_CacheRequester<void ()(unsigned long long)> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<ErrorInfo> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<ErrorInfo> >;

typedef struct _compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *> > {
	ErrorInfo __value_;
} compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *> >;

typedef struct _split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *> > {
	ErrorInfo __first_;
	ErrorInfo __begin_;
	ErrorInfo __end_;
	compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *> > __end_cap_;
} split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *> >;

typedef struct deque<ErrorInfo, std::__1::allocator<ErrorInfo> > {
	split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<ErrorInfo> > __size_;
} deque<ErrorInfo, std::__1::allocator<ErrorInfo> >;

typedef struct GEOTileKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned provider : 8;
	unsigned expires : 1;
	unsigned reserved1 : 7;
	unsigned char reserved2[4];
} GEOTileKey;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_GE39;

typedef struct {
	unsigned dymSuggestionVisibleTime : 1;
	unsigned retainSearchTime : 1;
	unsigned searchResultType : 1;
	unsigned enablePartialClientization : 1;
	unsigned isChainResultSet : 1;
	unsigned showDymSuggestionCloseButton : 1;
} SCD_Struct_GE40;

typedef struct {
	id field1;
	char* field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned field7;
	unsigned long long field8;
	BOOL field9;
	unsigned long long field10;
	float field11;
	unsigned long long field12;
	id field13;
	int field14;
} SCD_Struct_GE41;

typedef struct {
	float field1;
	float field2;
} SCD_Struct_GE42;

typedef struct {
	SCD_Struct_GE41 field1;
	SCD_Struct_GE42 field2;
	SCD_Struct_GE42 field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned long long field7;
	short field8;
	unsigned char field9;
	/*function pointer*/void* field10;
	float field11;
	float field12;
	unsigned field13;
	unsigned char field14;
	BOOL field15;
	BOOL field16;
	BOOL field17;
} SCD_Struct_GE43;

typedef struct {
	SCD_Struct_GE30 origin;
	SCD_Struct_GE30 size;
} SCD_Struct_GE44;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *> > >;

typedef struct _list_node_base<CacheItem, void *> {
	__list_node_base<CacheItem, void *> __prev_;
	__list_node_base<CacheItem, void *> __next_;
} list_node_base<CacheItem, void *>;

typedef struct list<CacheItem, std::__1::allocator<CacheItem> > {
	list_node_base<CacheItem, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *> > > __size_alloc_;
} list<CacheItem, std::__1::allocator<CacheItem> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, hashkey, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, hashkey, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, eqkey, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, eqkey, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, eqkey, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, hashkey, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, eqkey, true> > __p3_;
} hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, eqkey, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > >;

typedef struct unordered_map<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, eqkey, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > {
	hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, eqkey, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > __table_;
} unordered_map<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, eqkey, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > >;

typedef struct {
	unsigned field1;
	double field2;
} SCD_Struct_GE60;

typedef struct {
	unsigned long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE61;

typedef struct {
	unsigned buildingId : 1;
	unsigned featureId : 1;
	unsigned fixtureId : 1;
	unsigned geminiId : 1;
	unsigned levelId : 1;
	unsigned unitId : 1;
	unsigned venueId : 1;
	unsigned levelOrdinal : 1;
} SCD_Struct_GE62;

typedef struct GEOPDTimeRange {
	unsigned _duration;
	unsigned _startTime;
	SCD_Struct_GE22 _has;
} GEOPDTimeRange;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_GE66;

typedef struct {
	unsigned short field1[2];
	unsigned short field2[2];
} SCD_Struct_GE67;

typedef struct {
	SCD_Struct_GE42 field1;
	SCD_Struct_GE42 field2;
} SCD_Struct_GE68;

typedef struct {
	NSRange field1;
	unsigned long long field2;
	unsigned long long field3;
	int field4;
	int field5;
	int field6;
	unsigned long long field7;
	unsigned long long( field8;
	/*function pointer*/void* field9;
	= field10;
	SCD_Struct_GE41 field11;
	SCD_Struct_GE66) field12;
	/*function pointer*/void* field13;
	SCD_Struct_GE67 field14;
	unsigned char field15;
	BOOL field16;
	unsigned char field17;
	BOOL field18;
	BOOL field19;
	unsigned char field20;
	BOOL field21;
	unsigned char field22;
	_ field23;
	SCD_Struct_GE68 field24;
	BOOL field25;
	unsigned field26;
} SCD_Struct_GE69;

typedef struct {
	unsigned eastLng : 1;
	unsigned northLat : 1;
	unsigned southLat : 1;
	unsigned westLng : 1;
} SCD_Struct_GE70;

typedef struct {
	unsigned course : 1;
	unsigned courseAccuracy : 1;
	unsigned heading : 1;
	unsigned horizontalAccuracy : 1;
	unsigned rawCourse : 1;
	unsigned speed : 1;
	unsigned speedAccuracy : 1;
	unsigned timestamp : 1;
	unsigned transitID : 1;
	unsigned verticalAccuracy : 1;
	unsigned altitude : 1;
	unsigned formOfWay : 1;
	unsigned levelOrdinal : 1;
	unsigned matchQuality : 1;
	unsigned referenceFrame : 1;
	unsigned roadClass : 1;
	unsigned transportType : 1;
	unsigned type : 1;
	unsigned isMatchedLocation : 1;
	unsigned isShifted : 1;
} SCD_Struct_GE71;

typedef struct {
	int field1;
	SCD_Struct_GE3 field2;
	0 field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
	double field10;
	double field11;
	int field12;
	double field13;
	int field14;
	SCD_Struct_GE3 field15;
	0 field16;
	double field17;
	int field18;
	unsigned field19;
	int field20;
	int field21;
} SCD_Struct_GE72;

typedef struct _CFBurstTrie* CFBurstTrieRef;

typedef struct {
	long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE74;

typedef struct {
	unsigned color : 1;
	unsigned confidence : 1;
	unsigned decayTimeWindowInMinutes : 1;
	unsigned endOffset : 1;
	unsigned speedKph : 1;
	unsigned startOffset : 1;
	unsigned hidden : 1;
} SCD_Struct_GE75;

typedef struct shared_ptr<geo::MapNodeTransit> {
	MapNodeTransit __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapNodeTransit>;

typedef struct shared_ptr<geo::MapAccessPointFeature> {
	MapAccessPointFeature __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapAccessPointFeature>;

typedef struct shared_ptr<geo::MapEdgeTransit> {
	MapEdgeTransit __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapEdgeTransit>;

typedef struct _compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> > {
	/*function pointer*/void* __value_;
} compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> >;

typedef struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> > __end_cap_;
} vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D> >;

typedef struct {
	/*function pointer*/void* field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	/*function pointer*/void* field6;
	/*function pointer*/void* field7;
} SCD_Struct_GE81;

typedef struct {
	unsigned index;
	float offset;
} SCD_Struct_GE82;

typedef struct {
	unsigned sessionID : 1;
	unsigned requestTime : 1;
	unsigned sessionRelativeTimestamp : 1;
	unsigned departureTime : 1;
	unsigned mainTransportTypeMaxRouteCount : 1;
	unsigned nonRecommendedRoutesOption : 1;
	unsigned originalRoutePurpose : 1;
	unsigned requestMode : 1;
	unsigned sequenceNumber : 1;
	unsigned timeSinceLastRerouteRequest : 1;
	unsigned getRouteForZilchPoints : 1;
	unsigned isFromAPI : 1;
	unsigned needLatency : 1;
	unsigned useLiveTrafficAsFallback : 1;
} SCD_Struct_GE83;

typedef struct GEOTimepoint {
	double _time;
	int _type;
	SCD_Struct_GE22 _has;
} GEOTimepoint;

typedef struct {
	unsigned arrivalStepID : 1;
	unsigned departureStepID : 1;
	unsigned distance : 1;
	unsigned drivingSide : 1;
	unsigned expectedTime : 1;
	unsigned historicTravelTime : 1;
	unsigned routeType : 1;
	unsigned staticTravelTime : 1;
	unsigned transportType : 1;
	unsigned travelTimeAggressiveEstimate : 1;
	unsigned travelTimeConservativeEstimate : 1;
	unsigned avoidsHighways : 1;
	unsigned avoidsTolls : 1;
	unsigned avoidsTraffic : 1;
	unsigned isOfflineResponse : 1;
} SCD_Struct_GE85;

typedef struct {
	unsigned distance : 1;
	unsigned expectedTime : 1;
	unsigned hintFirstAnnouncementZilchIndex : 1;
	unsigned junctionType : 1;
	unsigned maneuverEndBasicIndex : 1;
	unsigned maneuverEndZilchIndex : 1;
	unsigned maneuverStartZilchIndex : 1;
	unsigned maneuverType : 1;
	unsigned overrideDrivingSide : 1;
	unsigned overrideTransportType : 1;
	unsigned stepID : 1;
	unsigned endsOnFwy : 1;
	unsigned maneuverLaneGuidanceSuppressed : 1;
	unsigned shouldChainManeuver : 1;
	unsigned stayOn : 1;
	unsigned toFreeway : 1;
	unsigned tollAhead : 1;
	unsigned tollPrior : 1;
} SCD_Struct_GE86;

typedef struct {
	unsigned bytes : 1;
	unsigned count : 1;
	unsigned httpStatus : 1;
	unsigned missType : 1;
	unsigned requestorType : 1;
} SCD_Struct_GE87;

typedef struct {
	unsigned sessionGUID : 1;
	unsigned geoId : 1;
	unsigned intersectingGeoId : 1;
	unsigned timeSinceMapEnteredForeground : 1;
	unsigned timeSinceMapViewportChanged : 1;
	unsigned timestamp : 1;
	unsigned businessSortOrder : 1;
	unsigned knownAccuracy : 1;
	unsigned localSearchProviderID : 1;
	unsigned mapMode : 1;
	unsigned maxBusinessReviews : 1;
	unsigned maxResults : 1;
	unsigned placeTypeLimit : 1;
	unsigned searchSource : 1;
	unsigned sequenceNumber : 1;
	unsigned transportTypeForTravelTimes : 1;
	unsigned excludeAddressInResults : 1;
	unsigned includeBusinessCategories : 1;
	unsigned includeBusinessRating : 1;
	unsigned includeEntryPoints : 1;
	unsigned includeFeatureSets : 1;
	unsigned includeGeoId : 1;
	unsigned includeMatchedToken : 1;
	unsigned includeNameForForwardGeocodingResults : 1;
	unsigned includePhonetics : 1;
	unsigned includeQuads : 1;
	unsigned includeRoadAccessPoints : 1;
	unsigned includeSpokenNames : 1;
	unsigned includeStatusCodeInfo : 1;
	unsigned includeSuggestionsOnly : 1;
	unsigned includeTravelDistance : 1;
	unsigned includeTravelTime : 1;
	unsigned includeUnmatchedStrings : 1;
	unsigned isCanonicalLocationSearch : 1;
	unsigned isFromAPI : 1;
	unsigned isPopularNearbyRequest : 1;
	unsigned isStrictGeocoding : 1;
	unsigned isStrictMapRegion : 1;
	unsigned structuredSearch : 1;
	unsigned suppressResultsRequiringAttribution : 1;
} SCD_Struct_GE88;

typedef struct atomic_flag {
	AB _Value;
} atomic_flag;

typedef union {
	atomic_flag flag;
	int dummy;
} SCD_Union_GE90;

typedef struct __CTServerConnection* CTServerConnectionRef;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct GEONavigationAudioFeedback {
	int _currentRouteTypeAtEndOfNav;
	unsigned _manuallyChangedRouteCount;
	unsigned _manuallyDisabledHFPCount;
	unsigned _manuallyEnabledHFPCount;
	unsigned _spokenPromptsCount;
	BOOL _bTHFPAvailableAtEndOfNav;
	BOOL _bTHFPRoutesAvailable;
	BOOL _currentRouteHFPEnabledAtEndOfNav;
	BOOL _everManuallyChangedRoute;
	BOOL _everManuallyEnabledHFPRoute;
	BOOL _everViewedAudioSheet;
	BOOL _everViewedAudioSheetBTAny;
	BOOL _everViewedAudioSheetBTHFP;
	BOOL _pauseSpokenAudioEnabled;
	BOOL _viewedAudioSheet;
	BOOL _viewedAudioSheetBTAny;
	BOOL _viewedAudioSheetBTHFP;
	BOOL _wirelessRoutesAvailable;
	SCD_Struct_GE86 _has;
} GEONavigationAudioFeedback;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct GEOPixelPoint {
	double _x;
	double _y;
	int _z;
	SCD_Struct_GE1 _has;
} GEOPixelPoint;

typedef struct {
	unsigned muid : 1;
	unsigned bookedUsingMaps : 1;
	unsigned called : 1;
	unsigned cancelled : 1;
	unsigned isAsync : 1;
	unsigned routed : 1;
	unsigned shared : 1;
	unsigned tappedCancelReservation : 1;
	unsigned tappedChangeReservation : 1;
	unsigned tappedProactiveTrayItem : 1;
	unsigned viewedDetailsFromPlacecard : 1;
	unsigned viewedInPlacecard : 1;
	unsigned viewedInProactiveTray : 1;
} SCD_Struct_LO96;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long> > >;

typedef struct unordered_map<unsigned int, unsigned long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long> > > {
	hash_table<std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long> > > __table_;
} unordered_map<unsigned int, unsigned long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long> > >;

typedef struct {
	double list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE107;

typedef struct {
	SCD_Struct_GE69 field1;
	unsigned long long field2;
	unsigned long long field3;
	BOOL field4;
	BOOL field5;
} SCD_Struct_GE108;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<geo::TransitEdgePiece> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<geo::TransitEdgePiece> >;

typedef struct _compressed_pair<geo::TransitEdgePiece **, std::__1::allocator<geo::TransitEdgePiece *> > {
	TransitEdgePiece __value_;
} compressed_pair<geo::TransitEdgePiece **, std::__1::allocator<geo::TransitEdgePiece *> >;

typedef struct _split_buffer<geo::TransitEdgePiece *, std::__1::allocator<geo::TransitEdgePiece *> > {
	TransitEdgePiece __first_;
	TransitEdgePiece __begin_;
	TransitEdgePiece __end_;
	compressed_pair<geo::TransitEdgePiece **, std::__1::allocator<geo::TransitEdgePiece *> > __end_cap_;
} split_buffer<geo::TransitEdgePiece *, std::__1::allocator<geo::TransitEdgePiece *> >;

typedef struct deque<geo::TransitEdgePiece, std::__1::allocator<geo::TransitEdgePiece> > {
	split_buffer<geo::TransitEdgePiece *, std::__1::allocator<geo::TransitEdgePiece *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<geo::TransitEdgePiece> > __size_;
} deque<geo::TransitEdgePiece, std::__1::allocator<geo::TransitEdgePiece> >;

typedef struct shared_ptr<geo::MapEdgeRoad> {
	MapEdgeRoad __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapEdgeRoad>;

typedef struct _compressed_pair<GEOVectorTilePoint *, std::__1::allocator<GEOVectorTilePoint> > {
	/*function pointer*/void* __value_;
} compressed_pair<GEOVectorTilePoint *, std::__1::allocator<GEOVectorTilePoint> >;

typedef struct vector<GEOVectorTilePoint, std::__1::allocator<GEOVectorTilePoint> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<GEOVectorTilePoint *, std::__1::allocator<GEOVectorTilePoint> > __end_cap_;
} vector<GEOVectorTilePoint, std::__1::allocator<GEOVectorTilePoint> >;

typedef struct _compressed_pair<geo::PolylineCoordinate *, std::__1::allocator<geo::PolylineCoordinate> > {
	PolylineCoordinate __value_;
} compressed_pair<geo::PolylineCoordinate *, std::__1::allocator<geo::PolylineCoordinate> >;

typedef struct vector<geo::PolylineCoordinate, std::__1::allocator<geo::PolylineCoordinate> > {
	PolylineCoordinate __begin_;
	PolylineCoordinate __end_;
	compressed_pair<geo::PolylineCoordinate *, std::__1::allocator<geo::PolylineCoordinate> > __end_cap_;
} vector<geo::PolylineCoordinate, std::__1::allocator<geo::PolylineCoordinate> >;

typedef struct {
	unsigned navVoiceVolume : 1;
	unsigned preferredTransportMode : 1;
	unsigned avoidHighways : 1;
	unsigned avoidTolls : 1;
	unsigned findMyCarEnabled : 1;
	unsigned headingEnabled : 1;
	unsigned labelEnabled : 1;
	unsigned pauseSpokenAudioEnabled : 1;
	unsigned speedLimitEnabled : 1;
	unsigned trafficEnabled : 1;
} SCD_Struct_GE118;

typedef struct _compressed_pair<(anonymous namespace)::Timestamp *, std::__1::allocator<(anonymous namespace)::Timestamp> > {
	Timestamp __value_;
} compressed_pair<(anonymous namespace)::Timestamp *, std::__1::allocator<(anonymous namespace)::Timestamp> >;

typedef struct vector<(anonymous namespace)::Timestamp, std::__1::allocator<(anonymous namespace)::Timestamp> > {
	Timestamp __begin_;
	Timestamp __end_;
	compressed_pair<(anonymous namespace)::Timestamp *, std::__1::allocator<(anonymous namespace)::Timestamp> > __end_cap_;
} vector<(anonymous namespace)::Timestamp, std::__1::allocator<(anonymous namespace)::Timestamp> >;

typedef struct {
	float list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE121;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct Matrix<float, 2, 1> {
	float _e[2];
} Matrix<float, 2, 1>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<GEOTileKey> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<GEOTileKey> >;

typedef struct _compressed_pair<float, std::__1::equal_to<GEOTileKey> > {
	float __value_;
} compressed_pair<float, std::__1::equal_to<GEOTileKey> >;

typedef struct _hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> {
	__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > > {
	hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > >;

typedef struct _hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<GEOTileKey> > __p2_;
	compressed_pair<float, std::__1::equal_to<GEOTileKey> > __p3_;
} hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> >;

typedef struct unordered_set<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > {
	hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > __table_;
} unordered_set<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> >;

typedef struct {
	unsigned timepoint : 1;
	unsigned basicPointsToBeIncluded : 1;
	unsigned destinationType : 1;
	unsigned mainTransportType : 1;
	unsigned trafficType : 1;
	unsigned walkingLimitMeters : 1;
	unsigned enableExperimentalMode : 1;
	unsigned includeContingencyRoutes : 1;
	unsigned includeCrossLanguagePhonetics : 1;
	unsigned includeHistoricTravelTime : 1;
	unsigned includeLaneGuidance : 1;
	unsigned includeManeuverIcons : 1;
	unsigned includePhonetics : 1;
	unsigned includeTrafficAlongRoute : 1;
	unsigned includeTrafficIncidents : 1;
	unsigned includeZilchPoints : 1;
	unsigned useMetricThreshold : 1;
} SCD_Struct_GE135;

typedef struct {
	unsigned field1;
	unsigned field2;
	/*function pointer*/void* field3;
} SCD_Struct_GE136;

typedef struct {
	unsigned field1;
	float field2;
	float field3;
	unsigned char field4;
	unsigned char field5;
} SCD_Struct_GE137;

typedef struct {
	unsigned char field1;
	float field2;
} SCD_Struct_GE138;

typedef struct {
	unsigned field1;
	SCD_Struct_GE1 field2;
	3 field3;
	8 field4;
	SCD_Struct_GE1 field5;
	3 field6;
	8 field7;
} SCD_Struct_GE139;

typedef struct {
	unsigned char field1;
	unsigned char field2;
	unsigned char field3;
	unsigned char( field4;
	/*function pointer*/void* field5;
	= field6;
	SCD_Struct_GE1 field7;
	3 field8;
	7 field9;
	SCD_Struct_GE1 field10;
	os_unfair_lock_s field11;
	3 field12;
	9) field13;
	float field14;
	float field15;
} SCD_Struct_GE140;

typedef struct {
	unsigned char field1;
	/*function pointer*/void* field2;
	unsigned long long field3;
	float field4;
	_ field5;
	NSRange field6;
	unsigned long long field7;
	unsigned long long field8;
	/*function pointer*/void* field9;
	_ field10;
	NSRange field11;
} SCD_Struct_GE141;

typedef struct {
	SCD_Struct_GE42 field1;
	SCD_Struct_GE42 field2;
	BOOL field3;
	BOOL field4;
	unsigned char field5;
	unsigned long long field6;
	unsigned long long field7;
	SCD_Struct_GE69 field8;
	unsigned long long field9;
} SCD_Struct_GE142;

typedef struct {
	SCD_Struct_GE42 field1;
	unsigned long long field2;
	SCD_Struct_GE69 field3;
	char* field4;
	char* field5;
} SCD_Struct_GE143;

typedef struct {
	SCD_Struct_GE42 field1;
	unsigned long long field2;
	unsigned long long field3;
	short field4;
	SCD_Struct_GE69 field5;
	unsigned long long field6;
} SCD_Struct_GE144;

typedef struct {
	unsigned long long field1;
	long long field2;
	BOOL field3;
	BOOL field4;
	unsigned long long field5;
	char* field6;
	char* field7;
	unsigned long long field8;
	unsigned long long field9;
} SCD_Struct_GE145;

typedef struct {
	unsigned long long field1;
	unsigned char field2;
	unsigned long long field3;
	unsigned long long field4;
	BOOL field5;
	unsigned long long field6;
	unsigned long long field7;
} SCD_Struct_GE146;

typedef struct {
	SCD_Struct_GE41 field1;
	char* field2;
	unsigned long long field3;
} SCD_Struct_GE147;

typedef struct {
	BOOL field1;
	unsigned long long field2;
	id field3;
} SCD_Struct_GE148;

typedef struct {
	unsigned char field1;
	unsigned char field2;
	unsigned char field3;
	BOOL field4;
	unsigned char field5;
	BOOL field6;
	SCD_Struct_GE42 field7;
} SCD_Struct_GE149;

typedef struct {
	unsigned short field1;
} SCD_Struct_GE150;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
} SCD_Struct_GE151;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
	float field5;
	float field6;
} SCD_Struct_GE152;

typedef struct {
	unsigned char field1;
	/*function pointer*/void* field2;
	unsigned long long field3;
	float field4;
	_ field5;
	NSRange field6;
	unsigned long long field7;
} SCD_Struct_GE153;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	char* field3;
} SCD_Struct_GE154;

typedef struct {
	char* field1;
	char* field2;
	unsigned field3;
} SCD_Struct_GE155;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	unsigned char field3;
} SCD_Struct_GE156;

typedef struct {
	unsigned char field1;
	unsigned short field2;
} SCD_Struct_GE157;

typedef struct {
	unsigned field1;
	int field2;
	float field3;
	BOOL field4;
	BOOL field5;
	BOOL field6;
	BOOL field7;
	BOOL field8;
	SCD_Struct_GE157 field9[16];
} SCD_Struct_GE158;

typedef struct {
	SCD_Struct_GE1 field1;
	5 field2;
	1 field3;
	SCD_Struct_GE1 field4;
	5 field5;
	8 field6;
} SCD_Struct_GE159;

typedef struct {
	SCD_Struct_GE41 field1;
	unsigned char field2;
	unsigned char field3;
	unsigned char field4;
	unsigned char field5;
	unsigned field6;
	float field7;
	unsigned field8;
	unsigned field9;
	unsigned field10;
} SCD_Struct_GE160;

typedef struct {
	_ field1;
	NSRange field2;
	unsigned long long field3;
	id field4;
	unsigned long long field5;
	unsigned long long field6;
	char* field7;
	unsigned field8;
} SCD_Struct_GE161;

typedef struct {
	id field1;
	unsigned field2;
	unsigned field3;
	_ field4;
	NSRange field5;
	/*function pointer*/void* field6;
	/*function pointer*/void* field7;
	unsigned long long field8;
	unsigned long long field9;
	_ field10;
	NSRange field11;
	_ field12;
	NSRange field13;
	BOOL field14;
	_ field15;
	NSRange field16;
	_ field17;
	NSRange field18;
	NSRange field19[2_];
	NSRange field20[2_];
} SCD_Struct_GE162;

typedef struct {
	unsigned field1;
	unsigned field2;
} SCD_Struct_GE163;

typedef struct {
	NSRange field1;
	_ field2;
	SCD_Struct_GE41 field3;
	float field4;
} SCD_Struct_GE164;

typedef struct {
	SCD_Struct_GE43 field1;
	unsigned long long field2;
	unsigned char field3;
	float field4;
	unsigned short field5;
	float field6;
} SCD_Struct_GE165;

typedef struct {
	unsigned field1;
	BOOL field2;
} SCD_Struct_GE166;

typedef struct {
	/*function pointer*/void* field1;
	unsigned long long field2;
	unsigned short field3;
	unsigned field4;
	char* field5;
	unsigned long long field6;
	SCD_Struct_GE1 field7;
	6 field8;
	6 field9;
} SCD_Struct_GE167;

typedef struct {
	char* field1;
	unsigned long long field2;
	unsigned long long field3;
} SCD_Struct_GE168;

typedef struct {
	unsigned char field1;
	SCD_Struct_GE1 field2;
	6 field3;
	8 field4;
	BOOL field5;
	char* field6;
	unsigned long long field7;
	unsigned long long field8;
} SCD_Struct_GE169;

typedef struct {
	unsigned field1;
	int field2;
} SCD_Struct_GE170;

typedef struct {
	unsigned field1;
	unsigned long long field2;
} SCD_Struct_GE171;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<GEORoadEdge> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<GEORoadEdge> >;

typedef struct _compressed_pair<float, std::__1::equal_to<GEORoadEdge> > {
	float __value_;
} compressed_pair<float, std::__1::equal_to<GEORoadEdge> >;

typedef struct _hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> {
	__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> > > {
	hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > >;

typedef struct _hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<GEORoadEdge> > __p2_;
	compressed_pair<float, std::__1::equal_to<GEORoadEdge> > __p3_;
} hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> >;

typedef struct unordered_set<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > {
	hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > __table_;
} unordered_set<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> >;

typedef struct PolylineCoordinate {
	unsigned index;
	float offset;
} PolylineCoordinate;

typedef struct GEOScreenResolution {
	double _height;
	double _width;
	SCD_Struct_GE22 _has;
} GEOScreenResolution;

typedef struct {
	unsigned businessID : 1;
	unsigned uID : 1;
	unsigned centerlineCount : 1;
	unsigned centerlineStart : 1;
	unsigned endLaneWidth : 1;
	unsigned endOffset : 1;
	unsigned endRoadOffset : 1;
	unsigned entryPointMask : 1;
	unsigned formOfWay : 1;
	unsigned minzoomRank : 1;
	unsigned placeType : 1;
	unsigned roadClass : 1;
	unsigned sectionCount : 1;
	unsigned sectionStart : 1;
	unsigned speedLimit : 1;
	unsigned startLaneWidth : 1;
	unsigned startOffset : 1;
	unsigned startRoadOffset : 1;
	unsigned styleGroup : 1;
	unsigned travelDirection : 1;
	unsigned type : 1;
	unsigned polyIsConvex : 1;
} SCD_Struct_GE184;

typedef struct _compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel> > {
	ZilchMapModel __value_;
} compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel> >;

typedef struct unique_ptr<geo::ZilchMapModel, std::__1::default_delete<geo::ZilchMapModel> > {
	compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel> > __ptr_;
} unique_ptr<geo::ZilchMapModel, std::__1::default_delete<geo::ZilchMapModel> >;

typedef struct shared_ptr<zilch::Message> {
	Message __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<zilch::Message>;

typedef struct Matrix<float, 4, 1> {
	float _e[4];
} Matrix<float, 4, 1>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData> > >;

typedef struct map<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, _GEOAltitudeTriggerData> > > {
	tree<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData> > > __tree_;
} map<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, _GEOAltitudeTriggerData> > >;

typedef struct {
	unsigned lineId : 1;
	unsigned latitudeHint : 1;
	unsigned longitudeHint : 1;
	unsigned scale : 1;
	unsigned size : 1;
	unsigned style : 1;
	unsigned version : 1;
	unsigned x : 1;
	unsigned y : 1;
	unsigned z : 1;
	unsigned preflight : 1;
} SCD_Struct_GE194;

typedef struct GEOPBTransitTimeRange {
	unsigned _duration;
	unsigned _startTime;
	SCD_Struct_GE22 _has;
} GEOPBTransitTimeRange;

typedef struct shared_ptr<geo::MapEdge> {
	MapEdge __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapEdge>;

typedef struct {
	unsigned durationMin : 1;
	unsigned endOffset : 1;
	unsigned latitude : 1;
	unsigned longitude : 1;
	unsigned startOffset : 1;
	unsigned startTime : 1;
	unsigned updateTime : 1;
	unsigned alertCCode : 1;
	unsigned color : 1;
	unsigned delay : 1;
	unsigned laneClosureCount : 1;
	unsigned laneClosureType : 1;
	unsigned maxZoomLevel : 1;
	unsigned minZoomLevel : 1;
	unsigned significance : 1;
	unsigned speed : 1;
	unsigned trafficTrend : 1;
	unsigned type : 1;
	unsigned blocked : 1;
	unsigned endTimeReliable : 1;
	unsigned hardBlocked : 1;
	unsigned hidden : 1;
	unsigned navigationAlert : 1;
} SCD_Struct_GE197;

typedef struct {
	float x;
	float y;
} SCD_Struct_GE198;

typedef struct {
	SCD_Struct_GE1 field1;
	9 field2;
	8 field3;
	SCD_Struct_GE1 field4;
	9 field5;
	8 field6;
} SCD_Struct_GE199;

typedef struct {
	SCD_Struct_GE1 field1;
	unsigned long long field2;
	unsigned long long field3;
	int field4;
	int field5;
	int field6;
	unsigned long long field7;
	unsigned long long( field8;
	/*function pointer*/void* field9;
	= field10;
	NSRange field11;
	9 field12;
	9 field13;
	SCD_Struct_GE41) field14;
	/*function pointer*/void* field15;
	SCD_Struct_GE66 field16;
	unsigned char field17;
	BOOL field18;
	unsigned char field19;
	BOOL field20;
	BOOL field21;
	unsigned char field22;
	BOOL field23;
	unsigned char field24;
	_ field25;
	SCD_Struct_GE67 field26;
	BOOL field27;
	unsigned field28;
} SCD_Struct_GE200;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::hash<GEOTileKey>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::hash<GEOTileKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::equal_to<GEOTileKey>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::equal_to<GEOTileKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::hash<GEOTileKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::equal_to<GEOTileKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > > >;

typedef struct unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > > > {
	hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> >, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > > > __table_;
} unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > > >;

typedef struct _list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> {
	__list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> __prev_;
	__list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> __next_;
} list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>;

typedef struct list<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr> > > {
	list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > > __size_alloc_;
} list<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr> > >;

typedef struct GEOGenericContainer<_GEOTileKey, id, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
	mutex _lock;
	list<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr> > > _list;
	unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> > > > _map;
	unsigned long long _maxCapacity;
	unsigned long long _maxCost;
	unsigned long long _currentCost;
	unsigned long long _currentCount;
} GEOGenericContainer<_GEOTileKey, id, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>;

typedef struct CAARiseTransitSetDetails {
	BOOL bRiseValid;
	double Rise;
	BOOL bTransitValid;
	BOOL bTransitAboveHorizon;
	double Transit;
	BOOL bSetValid;
	double Set;
} CAARiseTransitSetDetails;

typedef struct {
	SCD_Struct_GE1 field1;
	0 field2;
	0 field3;
	SCD_Struct_GE1 field4;
	9 field5;
	8 field6;
	BOOL field7;
	BOOL field8;
	unsigned char field9;
	unsigned long long field10;
	unsigned long long field11;
	SCD_Struct_GE2 field12;
	9 field13;
	8 field14;
	unsigned long long field15;
} SCD_Struct_GE216;

typedef struct {
	SCD_Struct_GE1 field1;
	SCD_Struct_GE1 field2;
	9 field3;
	8 field4;
	SCD_Struct_GE41 field5;
	9 field6;
	8 field7;
	unsigned long long field8;
	unsigned long long field9;
	unsigned long long field10;
	unsigned long long field11;
	short field12;
	unsigned char field13;
	/*function pointer*/void* field14;
	float field15;
	float field16;
	unsigned field17;
	unsigned char field18;
	BOOL field19;
	BOOL field20;
	BOOL field21;
} SCD_Struct_GE217;

typedef struct {
	SCD_Struct_GE2 field1;
	1 field2;
	7 field3;
	unsigned long long field4;
	unsigned char field5;
	float field6;
	unsigned short field7;
	float field8;
} SCD_Struct_GE218;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> >;

typedef struct _compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> > {
	/*function pointer*/void* __value_;
} compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> >;

typedef struct _split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> > {
	/*function pointer*/void* __first_;
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> > __end_cap_;
} split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> >;

typedef struct deque<GEORoadEdge, std::__1::allocator<GEORoadEdge> > {
	split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> > __size_;
} deque<GEORoadEdge, std::__1::allocator<GEORoadEdge> >;

typedef struct {
	unsigned sessionId : 1;
	unsigned carHeadunitPixelHeight : 1;
	unsigned carHeadunitPixelWidth : 1;
	unsigned mapZoomLevel : 1;
	unsigned sessionRelativeTimestamp : 1;
	unsigned action : 1;
	unsigned carHeadunitConnectionType : 1;
	unsigned carHeadunitInteractionModel : 1;
	unsigned deviceBatteryState : 1;
	unsigned deviceInterfaceOrientation : 1;
	unsigned httpRequestPriority : 1;
	unsigned mode : 1;
	unsigned photosCount : 1;
	unsigned requestMode : 1;
	unsigned reviewUserPhotosCount : 1;
	unsigned sequenceNumber : 1;
	unsigned source : 1;
	unsigned timeSinceMapEnteredForeground : 1;
	unsigned timeSinceMapViewportChanged : 1;
	unsigned appDarkMode : 1;
	unsigned deviceDarkMode : 1;
	unsigned deviceInVehicle : 1;
	unsigned isAPICall : 1;
	unsigned isRedoSearch : 1;
	unsigned navigating : 1;
	unsigned supportDirectionIntentAutocomplete : 1;
	unsigned supportDirectionIntentSearch : 1;
	unsigned supportDymSuggestion : 1;
	unsigned supportUnresolvedDirectionIntent : 1;
	unsigned useBackgroundUrl : 1;
	unsigned wantsBrandIcon : 1;
} SCD_Struct_GE223;

typedef struct __CFSet* CFSetRef;

typedef struct _compressed_pair<geo::RouteMapMatchingSection *, std::__1::default_delete<geo::RouteMapMatchingSection> > {
	RouteMapMatchingSection __value_;
} compressed_pair<geo::RouteMapMatchingSection *, std::__1::default_delete<geo::RouteMapMatchingSection> >;

typedef struct unique_ptr<geo::RouteMapMatchingSection, std::__1::default_delete<geo::RouteMapMatchingSection> > {
	compressed_pair<geo::RouteMapMatchingSection *, std::__1::default_delete<geo::RouteMapMatchingSection> > __ptr_;
} unique_ptr<geo::RouteMapMatchingSection, std::__1::default_delete<geo::RouteMapMatchingSection> >;

typedef struct shared_ptr<addr_obj::AddressObject> {
	AddressObject __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addr_obj::AddressObject>;

typedef struct sqlite3_context* sqlite3_contextRef;

