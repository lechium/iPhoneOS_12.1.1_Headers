/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:46:40 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <PencilKit/PencilKit-Structs.h>
@class NSArray, NSDictionary, NSMutableArray, NSString;

@interface DKDGLFrameBuffer : NSObject {

	NSArray* _textureConfigs;
	NSDictionary* _namesToTextureDict;
	NSMutableArray* _currentTextureLookupInfoByAttachment;
	NSMutableArray* _desiredTextureLookupInfoByAttachment;
	NSArray* _textureConfigsByAttachment;
	NSArray* _textureLookupInfosByAttachment;
	long long _currentBindingOption;
	unsigned _currentDrawBuffers[1];
	int _currentDrawBufferCount;
	unsigned _currentReadBuffer;
	unsigned _framebuffer;
	BOOL _isUsingNonDefaultAttachments;
	CVOpenGLESTextureCacheRef _textureCache;
	BOOL _isBound;
	BOOL _shouldDeleteTexturesOnTeardown;
	NSString* _name;
	CGSize _size;

}

@property (nonatomic,readonly) CGSize size;                                    //@synthesize size=_size - In the implementation block
@property (nonatomic,readonly) BOOL isBound;                                   //@synthesize isBound=_isBound - In the implementation block
@property (assign,nonatomic) BOOL shouldDeleteTexturesOnTeardown;              //@synthesize shouldDeleteTexturesOnTeardown=_shouldDeleteTexturesOnTeardown - In the implementation block
@property (nonatomic,copy) NSString * name;                                    //@synthesize name=_name - In the implementation block
+(int)currentGLFramebufferWithBindingOption:(long long)arg1 ;
+(void)setCurrentGLFramebuffer:(int)arg1 withBindingOption:(long long)arg2 ;
+(int)currentGLFramebuffer;
+(void)setCurrentGLFramebuffer:(int)arg1 ;
-(CVBufferRef)pixelBufferAtIndex:(unsigned long long)arg1 attachment:(unsigned)arg2 ;
-(int)glFramebuffer;
-(void)bindFramebufferWithBindingOption:(long long)arg1 ;
-(id)initWithSize:(CGSize)arg1 textureConfigs:(id)arg2 textureCache:(CVOpenGLESTextureCacheRef)arg3 ;
-(CVBufferRef)createTextureCacheTextureWithSize:(CGSize)arg1 pixelBufferOut:(_CVBuffer*)arg2 ;
-(BOOL)p_isCurrentDrawBuffersEqualToDrawbuffers:(unsigned*)arg1 count:(long long)arg2 ;
-(void)p_setDrawBuffersAndReadBuffer;
-(void)p_setFramebufferTextureAtAttachmentIndex:(long long)arg1 bindingOption:(long long)arg2 ;
-(void)unbindFramebufferAndBindGLFramebuffer:(int)arg1 withBindingOption:(long long)arg2 ;
-(long long)currentTextureIndexAtAttachment:(unsigned)arg1 ;
-(void)setCurrentTextureNamed:(id)arg1 atAttachment:(unsigned)arg2 ;
-(void)setCurrentTexturesToNext;
-(CGSize)sizeOfGLTextureNamed:(id)arg1 ;
-(id)initWithSize:(CGSize)arg1 textureConfigs:(id)arg2 ;
-(id)initWithSize:(CGSize)arg1 textureCount:(unsigned long long)arg2 ;
-(void)setupFramebufferIfNecessary;
-(void)setCurrentTextureIndex:(unsigned long long)arg1 atAttachment:(unsigned)arg2 ;
-(void)setCurrentTextureIndex:(unsigned long long)arg1 ;
-(void)setCurrentTextureToNextAtAttachment:(unsigned)arg1 ;
-(unsigned)GLTextureAtIndex:(unsigned long long)arg1 attachment:(unsigned)arg2 ;
-(unsigned)currentGLTextureAtAttachment:(unsigned)arg1 ;
-(void)bindFramebuffer;
-(void)unbindFramebufferAndBindGLFramebuffer:(int)arg1 ;
-(void)setCurrentTextureNamed:(id)arg1 ;
-(unsigned)GLTextureAtIndex:(unsigned long long)arg1 ;
-(unsigned)GLTextureNamed:(id)arg1 ;
-(unsigned)currentGLTexture;
-(BOOL)isBound;
-(BOOL)shouldDeleteTexturesOnTeardown;
-(void)setShouldDeleteTexturesOnTeardown:(BOOL)arg1 ;
-(CGSize)size;
-(void)dealloc;
-(NSString *)name;
-(void)setName:(NSString *)arg1 ;
-(id)description;
-(id)initWithSize:(CGSize)arg1 ;
-(void)teardown;
@end

