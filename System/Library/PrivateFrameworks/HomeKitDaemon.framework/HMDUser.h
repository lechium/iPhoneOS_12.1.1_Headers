/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:51:11 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <HMFoundation/HMFObject.h>
#import <libobjc.A.dylib/HMFLogging.h>
#import <libobjc.A.dylib/HMFDumpState.h>
#import <libobjc.A.dylib/HMDBackingStoreObjectProtocol.h>
#import <libobjc.A.dylib/HMDHomeMessageReceiver.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@protocol OS_dispatch_queue;
@class NSUUID, NSMutableArray, HMDAccountHandle, HMDAccountIdentifier, HMDHome, NSString, HMUserPresenceAuthorization, HAPPairingIdentity, HMDAssistantAccessControl, NSObject, AVOutputDeviceAuthorizedPeer, NSSet;

@interface HMDUser : HMFObject <HMFLogging, HMFDumpState, HMDBackingStoreObjectProtocol, HMDHomeMessageReceiver, NSSecureCoding> {

	NSUUID* _uuid;
	BOOL _remoteAccessAllowed;
	NSMutableArray* _relayAccessTokens;
	HMDAccountHandle* _accountHandle;
	HMDAccountIdentifier* _accountIdentifier;
	unsigned long long _privilege;
	HMDHome* _home;
	NSString* _userID;
	HMUserPresenceAuthorization* _presenceAuthStatus;
	NSString* _relayIdentifier;
	HAPPairingIdentity* _pairingIdentity;
	NSString* _displayName;
	HMDAssistantAccessControl* _assistantAccessControl;
	NSObject*<OS_dispatch_queue> _clientQueue;
	NSObject*<OS_dispatch_queue> _propertyQueue;

}

@property (copy,readonly) AVOutputDeviceAuthorizedPeer * av_authorizedPeer; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> clientQueue;                      //@synthesize clientQueue=_clientQueue - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> propertyQueue;                    //@synthesize propertyQueue=_propertyQueue - In the implementation block
@property (nonatomic,copy,readonly) NSString * encodingRemoteDisplayName; 
@property (retain) HMDAssistantAccessControl * assistantAccessControl;                        //@synthesize assistantAccessControl=_assistantAccessControl - In the implementation block
@property (setter=setUUID:,copy) NSUUID * uuid;                                               //@synthesize uuid=_uuid - In the implementation block
@property (__weak) HMDHome * home;                                                            //@synthesize home=_home - In the implementation block
@property (copy) HMUserPresenceAuthorization * presenceAuthStatus;                            //@synthesize presenceAuthStatus=_presenceAuthStatus - In the implementation block
@property (assign) unsigned long long privilege;                                              //@synthesize privilege=_privilege - In the implementation block
@property (getter=isRemoteAccessAllowed) BOOL remoteAccessAllowed;                            //@synthesize remoteAccessAllowed=_remoteAccessAllowed - In the implementation block
@property (copy) HAPPairingIdentity * pairingIdentity;                                        //@synthesize pairingIdentity=_pairingIdentity - In the implementation block
@property (copy) HMDAccountIdentifier * accountIdentifier; 
@property (copy) NSString * relayIdentifier;                                                  //@synthesize relayIdentifier=_relayIdentifier - In the implementation block
@property (copy) NSString * userID;                                                           //@synthesize userID=_userID - In the implementation block
@property (copy,readonly) NSString * displayName;                                             //@synthesize displayName=_displayName - In the implementation block
@property (getter=isAdministrator,readonly) BOOL administrator; 
@property (getter=isOwner,readonly) BOOL owner; 
@property (getter=isRemoteGateway,readonly) BOOL remoteGateway; 
@property (getter=isCurrentUser,readonly) BOOL currentUser; 
@property (getter=isValid,readonly) BOOL valid; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSUUID * messageTargetUUID; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> messageReceiveQueue; 
@property (copy,readonly) NSSet * messageReceiverChildren; 
+(id)logCategory;
+(BOOL)hasMessageReceiverChildren;
+(id)currentUserWithPrivilege:(unsigned long long)arg1 forHome:(id)arg2 ;
+(id)userWithDictionary:(id)arg1 forHome:(id)arg2 ;
+(id)userIDForAccountHandle:(id)arg1 ;
+(id)UUIDWithUserID:(id)arg1 forHomeIdentifier:(id)arg2 uuid:(id)arg3 pairingIdentity:(id)arg4 ;
+(id)ownerWithUserID:(id)arg1 home:(id)arg2 pairingIdentity:(id)arg3 homeManager:(id)arg4 ;
+(BOOL)supportsSecureCoding;
-(void)setDisplayName:(NSString *)arg1 ;
-(void)setHome:(HMDHome *)arg1 ;
-(HMDHome *)home;
-(BOOL)isCurrentUser;
-(NSObject*<OS_dispatch_queue>)propertyQueue;
-(id)account;
-(void)setAccountIdentifier:(HMDAccountIdentifier *)arg1 ;
-(HMDAccountIdentifier *)accountIdentifier;
-(NSString *)userID;
-(id)dumpState;
-(id)modelObjectWithChangeType:(unsigned long long)arg1 version:(long long)arg2 ;
-(NSUUID *)messageTargetUUID;
-(NSObject*<OS_dispatch_queue>)messageReceiveQueue;
-(id)logIdentifier;
-(void)transactionObjectUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3 ;
-(void)transactionObjectRemoved:(id)arg1 message:(id)arg2 ;
-(id)modelObjectWithChangeType:(unsigned long long)arg1 ;
-(id)backingStoreObjects:(long long)arg1 ;
-(HMUserPresenceAuthorization *)presenceAuthStatus;
-(HAPPairingIdentity *)pairingIdentity;
-(id)pairingUsername;
-(NSObject*<OS_dispatch_queue>)clientQueue;
-(BOOL)refreshDisplayName;
-(BOOL)isRemoteGateway;
-(id)dictionaryEncoding;
-(id)publicKey;
-(id)messageDispatcher;
-(void)configureWithHome:(id)arg1 ;
-(void)registerForMessages;
-(BOOL)isRemoteAccessAllowed;
-(id)relayAccessTokenForAccessory:(id)arg1 ;
-(id)messageDestination;
-(void)_handleAssistantAccessControlUpdate:(id)arg1 ;
-(void)handleAssistantAccessControlUpdate:(id)arg1 ;
-(void)addRelayAccessToken:(id)arg1 ;
-(BOOL)isOwner;
-(unsigned long long)privilege;
-(void)setPresenceAuthStatus:(HMUserPresenceAuthorization *)arg1 ;
-(BOOL)isAdministrator;
-(id)initWithAccountHandle:(id)arg1 home:(id)arg2 pairingIdentity:(id)arg3 privilege:(unsigned long long)arg4 ;
-(void)setRemoteAccessAllowed:(BOOL)arg1 ;
-(void)setPrivilege:(unsigned long long)arg1 ;
-(NSString *)relayIdentifier;
-(void)updateRelayIdentifier:(id)arg1 ;
-(void)setUserID:(NSString *)arg1 ;
-(id)initWithModelObject:(id)arg1 ;
-(void)setPairingIdentity:(HAPPairingIdentity *)arg1 ;
-(BOOL)updateAdministrator:(BOOL)arg1 ;
-(BOOL)requiresMakoSupport;
-(void)setAccountHandle:(id)arg1 ;
-(void)migrateCloudZone:(id)arg1 migrationQueue:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)removeAccessoriesFromAssistantAccessControlList:(id)arg1 ;
-(void)migrateAfterCloudMerge:(/*^block*/id)arg1 ;
-(id)accountHandle;
-(id)attributeDescriptions;
-(AVOutputDeviceAuthorizedPeer *)av_authorizedPeer;
-(void)_handlePairingIdentityRequest:(id)arg1 ;
-(void)setRelayIdentifier:(NSString *)arg1 ;
-(HMDAssistantAccessControl *)assistantAccessControl;
-(void)__handleRemovedAccount:(id)arg1 ;
-(void)removeRelayAccessToken:(id)arg1 ;
-(void)setAssistantAccessControl:(HMDAssistantAccessControl *)arg1 ;
-(id)relayAccessTokens;
-(void)registerIdentity;
-(BOOL)isCurrentUserAndOwner;
-(unsigned long long)_compatiblePrivilege;
-(NSString *)encodingRemoteDisplayName;
-(void)_transactionUserUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3 ;
-(id)_relayAccessTokenForIdentifier:(id)arg1 ;
-(void)_addRelayAccessToken:(id)arg1 ;
-(void)_removeRelayAccessToken:(id)arg1 ;
-(void)_fixupRelayAccessTokens;
-(void)deregisterIdentity;
-(void)__handleAddedAccount:(id)arg1 ;
-(BOOL)updateRemoteAccessAllowed:(BOOL)arg1 ;
-(BOOL)containsRelayAccessToken:(id)arg1 ;
-(void)_migrateRelayAccessTokensCloudZone:(id)arg1 migrationQueue:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)dealloc;
-(BOOL)isEqual:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(unsigned long long)hash;
-(NSUUID *)uuid;
-(void)setUUID:(id)arg1 ;
-(NSString *)displayName;
-(id)shortDescription;
-(BOOL)isValid;
@end

