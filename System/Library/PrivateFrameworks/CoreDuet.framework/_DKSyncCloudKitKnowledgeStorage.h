/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:43:55 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/APSConnectionDelegate.h>

@protocol _DKKeyValueStore, _DKSyncRemoteKnowledgeStorageFetchDelegate;
@class _DKThrottledActivity, _DKSyncPeerStatusTracker, CKContainer, APSConnection, NSMutableDictionary, NSMutableSet, CKServerChangeToken, NSOperation, NSHashTable, NSString;

@interface _DKSyncCloudKitKnowledgeStorage : NSObject <APSConnectionDelegate> {

	BOOL _started;
	id<_DKKeyValueStore> _keyValueStore;
	_DKThrottledActivity* _activityThrottler;
	_DKSyncPeerStatusTracker* _tracker;
	BOOL _cloudSyncAvailablityObserverRegistered;
	CKContainer* _container;
	APSConnection* _connection;
	double _updateSyncedDeviceIdentifiersBackoffTimeInterval;
	NSMutableDictionary* _zoneIDsBySourceDeviceID;
	NSMutableDictionary* _recordZonesByZoneID;
	BOOL _databaseChangesExist;
	BOOL _isPrewarmed;
	NSMutableSet* _zoneIDsWithAdditionChanges;
	NSMutableSet* _zoneIDsWithDeletionChanges;
	NSMutableSet* _zoneIDsWithUnrecoverableDecryptionErrors;
	CKServerChangeToken* _fetchDatabaseChangesServerChangeToken;
	NSOperation* _previousDependentOperation;
	NSHashTable* _outstandingOperations;
	BOOL _available;
	id<_DKSyncRemoteKnowledgeStorageFetchDelegate> _delegate;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (retain) id<_DKSyncRemoteKnowledgeStorageFetchDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (getter=isAvailable) BOOL available;                                           //@synthesize available=_available - In the implementation block
+(id)zoneIDWithDeviceID:(id)arg1 ;
+(void)setMySyncZoneID:(id)arg1 ;
+(id)mySyncZoneID;
+(id)deviceIDFromZoneID:(id)arg1 ;
+(id)sharedInstance;
-(long long)transportType;
-(void)_registerCloudSyncAvailablityObserver;
-(void)_unregisterCloudSyncAvailablityObserver;
-(void)_createPushConnection;
-(void)_destroyPushConnection;
-(void)setFetchDelegate:(id)arg1 ;
-(void)fetchSourceDeviceIDFromPeer:(id)arg1 highPriority:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(void)_cloudSyncAvailabilityDidChange:(id)arg1 ;
-(void)updateStorageWithAddedEvents:(id)arg1 deletedEventIDs:(id)arg2 highPriority:(BOOL)arg3 completion:(/*^block*/id)arg4 ;
-(void)performUpdateSyncedDeviceIdentifiersWithCompletion:(/*^block*/id)arg1 ;
-(BOOL)_queueOperationForPrivateCloudDatabase:(id)arg1 dependent:(BOOL)arg2 policy:(id)arg3 error:(id*)arg4 ;
-(void)setHasAdditionsFlag:(BOOL)arg1 forPeer:(id)arg2 ;
-(void)setHasDeletionsFlag:(BOOL)arg1 forPeer:(id)arg2 ;
-(void)_createZoneWithZoneID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_deleteZoneWithZoneID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_performThrottledUpdateSyncedDeviceIdentifiersWithCompletion:(/*^block*/id)arg1 ;
-(id)_handleAnySpecialnessWithOperationError:(id)arg1 ;
-(void)scheduleRetryUpdateSyncedDeviceIdentifiers;
-(void)updateSyncedDeviceIdentifiersWithRecordZonesByZoneID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)finishUpdatingSyncedDeviceIdentifiersWithMySyncZoneID:(id)arg1 orError:(id)arg2 zoneIDsBySourceDeviceID:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)configureCloudPseudoPeerWithMySyncZoneID:(id)arg1 ;
-(void)setZoneIDsBySourceDeviceID:(id)arg1 ;
-(void)_registerDatabaseChangesSubscription;
-(void)configurePeerWithSourceDeviceID:(id)arg1 zoneID:(id)arg2 ;
-(void)_storeZoneIDFromRecords:(id)arg1 orError:(id)arg2 ;
-(void)addSourceDeviceIdentifierWithRecordZoneID:(id)arg1 ;
-(void)removeSourceDeviceIdentifierWithRecordZoneID:(id)arg1 ;
-(void)setPrewarmedFlag;
-(void)fastForwardPastDeletionsInNewZone:(id)arg1 sourceDeviceID:(id)arg2 ;
-(void)_setPreviousServerChangeToken:(id)arg1 forRecordZoneID:(id)arg2 ;
-(void)commitFetchDatabaseChangesServerChangeToken;
-(void)fetchChangedZonesWithCompletion:(/*^block*/id)arg1 ;
-(void)syncDownAdditionsFromCloudWithZoneID:(id)arg1 creationDateBetweenDate:(id)arg2 andDate:(id)arg3 streamNames:(id)arg4 limit:(unsigned long long)arg5 fetchOrder:(long long)arg6 completion:(/*^block*/id)arg7 ;
-(void)syncDownDeletionsFromCloudWithZoneID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)syncDownDeletionsFromCloudWithZoneID:(id)arg1 deletedRecordIDsAndTypes:(id)arg2 attempt:(unsigned long long)arg3 completion:(/*^block*/id)arg4 ;
-(id)_previousServerChangeTokenKeyForRecordZoneID:(id)arg1 ;
-(id)_previousServerChangeTokenForRecordZoneID:(id)arg1 ;
-(void)_resetPreviousServerChangeTokenForRecordZoneID:(id)arg1 ;
-(void)fetchEventsFromPeer:(id)arg1 creationDateBetweenDate:(id)arg2 andDate:(id)arg3 streamNames:(id)arg4 limit:(unsigned long long)arg5 fetchOrder:(long long)arg6 highPriority:(BOOL)arg7 completion:(/*^block*/id)arg8 ;
-(void)syncUpToCloudWithRecordsToSave:(id)arg1 recordIDsToDelete:(id)arg2 completion:(/*^block*/id)arg3 ;
-(BOOL)hasAdditionsFlagForPeer:(id)arg1 ;
-(BOOL)hasDeletionsFlagForPeer:(id)arg1 ;
-(void)clearPrewarmedFlag;
-(void)prewarmFetchWithCompletion:(/*^block*/id)arg1 ;
-(void)fetchDeletedEventIDsFromPeer:(id)arg1 sinceDate:(id)arg2 streamNames:(id)arg3 limit:(unsigned long long)arg4 highPriority:(BOOL)arg5 completion:(/*^block*/id)arg6 ;
-(void)fetchAdditionsHighWaterMarkWithPeer:(id)arg1 highPriority:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(void)fetchDeletionsHighWaterMarkWithPeer:(id)arg1 highPriority:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(void)setAvailable:(BOOL)arg1 ;
-(void)cancelOutstandingOperations;
-(BOOL)isAvailable;
-(void)connection:(id)arg1 didReceivePublicToken:(id)arg2 ;
-(void)connection:(id)arg1 didReceiveIncomingMessage:(id)arg2 ;
-(id)init;
-(void)dealloc;
-(id)name;
-(void)setDelegate:(id<_DKSyncRemoteKnowledgeStorageFetchDelegate>)arg1 ;
-(id<_DKSyncRemoteKnowledgeStorageFetchDelegate>)delegate;
-(void)start;
@end

