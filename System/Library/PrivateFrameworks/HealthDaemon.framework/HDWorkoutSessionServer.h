/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:49:36 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/HKDataFlowLinkProcessor.h>
#import <libobjc.A.dylib/HKStateMachineDelegate.h>
#import <libobjc.A.dylib/HDWorkoutSessionStateController.h>
#import <libobjc.A.dylib/HDWorkoutDataSource.h>

@protocol OS_dispatch_queue, HDWorkoutSessionController;
@class HDProfile, HDWorkoutManager, NSObject, HKDataFlowLink, HKObserverSet, _HKExpiringCompletionTimer, BKSProcessAssertion, HDWorkoutSessionEntity, HKStateMachine, NSUUID, HKWorkoutConfiguration, NSString, HDWorkoutSessionTaskServer, HDXPCClient, HKSource, NSDate;

@interface HDWorkoutSessionServer : NSObject <HKDataFlowLinkProcessor, HKStateMachineDelegate, HDWorkoutSessionStateController, HDWorkoutDataSource> {

	HDProfile* _profile;
	HDWorkoutManager* _workoutManager;
	NSObject*<OS_dispatch_queue> _queue;
	NSObject*<OS_dispatch_queue> _persistenceQueue;
	HKDataFlowLink* _workoutDataFlowLink;
	HKObserverSet* _observers;
	id<HDWorkoutSessionController> _sessionController;
	_HKExpiringCompletionTimer* _invalidationTimer;
	BKSProcessAssertion* _invalidationAssertion;
	HDWorkoutSessionEntity* _persistentEntity;
	double _stopEventGenerationWaitInterval;
	HKStateMachine* _stateMachine;
	HKStateMachine* _targetStateMachine;
	BOOL _hasFailed;
	NSUUID* _identifier;
	HKWorkoutConfiguration* _workoutConfiguration;
	NSString* _applicationIdentifier;
	HDWorkoutSessionTaskServer* _taskServer;
	HDXPCClient* _client;
	NSString* _clientProcessBundleIdentifier;
	HKSource* _clientSource;
	NSDate* _startDate;
	NSDate* _stopDate;

}

@property (nonatomic,copy,readonly) NSUUID * identifier;                                         //@synthesize identifier=_identifier - In the implementation block
@property (nonatomic,copy,readonly) HKWorkoutConfiguration * workoutConfiguration;               //@synthesize workoutConfiguration=_workoutConfiguration - In the implementation block
@property (nonatomic,copy,readonly) NSString * applicationIdentifier;                            //@synthesize applicationIdentifier=_applicationIdentifier - In the implementation block
@property (nonatomic,readonly) BOOL isActive; 
@property (assign,nonatomic,__weak) HDWorkoutSessionTaskServer * taskServer;                     //@synthesize taskServer=_taskServer - In the implementation block
@property (nonatomic,retain) HDXPCClient * client;                                               //@synthesize client=_client - In the implementation block
@property (nonatomic,copy,readonly) NSString * clientProcessBundleIdentifier;                    //@synthesize clientProcessBundleIdentifier=_clientProcessBundleIdentifier - In the implementation block
@property (nonatomic,copy,readonly) HKSource * clientSource;                                     //@synthesize clientSource=_clientSource - In the implementation block
@property (nonatomic,readonly) long long state; 
@property (nonatomic,copy,readonly) NSDate * startDate;                                          //@synthesize startDate=_startDate - In the implementation block
@property (nonatomic,copy,readonly) NSDate * stopDate;                                           //@synthesize stopDate=_stopDate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) id<HDWorkoutDataAccumulator> workoutDataAccumulator; 
@property (readonly) HKDataFlowLink * workoutDataFlowLink; 
@property (copy,readonly) NSUUID * workoutDataProcessorUUID; 
+(id)recoveredSessionServerWithProfile:(id)arg1 sessionUUID:(id)arg2 workoutManager:(id)arg3 error:(id*)arg4 ;
+(BOOL)finishAllWorkoutSessionsForClient:(id)arg1 profile:(id)arg2 error:(id*)arg3 ;
+(id)postRestartRecoveredSessionServerWithProfile:(id)arg1 workoutManager:(id)arg2 error:(id*)arg3 ;
+(BOOL)finishAllWorkoutsExcludingSessions:(id)arg1 profile:(id)arg2 error:(id*)arg3 ;
+(BOOL)_finishSessionControllerForSessionEntity:(id)arg1 profile:(id)arg2 transaction:(id)arg3 error:(id*)arg4 ;
+(Class)_sessionControllerClassFromWorkoutConfiguration:(id)arg1 ;
+(id)workoutSessionServerStateMachineForConfiguration:(id)arg1 sessionUUID:(id)arg2 ;
+(id)clientTargetStateMachineForConfiguration:(id)arg1 sessionUUID:(id)arg2 ;
+(void)unitTest_setDefaultStopEventGenerationWaitInterval:(double)arg1 ;
-(NSDate *)startDate;
-(void)workoutDataDestination:(id)arg1 requestsDataFrom:(id)arg2 to:(id)arg3 ;
-(void)workoutDataDestination:(id)arg1 didChangeFromState:(unsigned long long)arg2 toState:(unsigned long long)arg3 ;
-(void)workoutDataDestination:(id)arg1 requestsFinalDataFrom:(id)arg2 to:(id)arg3 completion:(/*^block*/id)arg4 ;
-(HKDataFlowLink *)workoutDataFlowLink;
-(NSUUID *)workoutDataProcessorUUID;
-(id<HDWorkoutDataAccumulator>)workoutDataAccumulator;
-(void)addObserver:(id)arg1 queue:(id)arg2 ;
-(HDXPCClient *)client;
-(HKWorkoutConfiguration *)workoutConfiguration;
-(void)setTaskServer:(HDWorkoutSessionTaskServer *)arg1 ;
-(void)setAssociatedWorkoutBuilderEntity:(id)arg1 ;
-(void)setWorkoutDataAccumulator:(id<HDWorkoutDataAccumulator>)arg1 ;
-(BOOL)setTargetState:(long long)arg1 date:(id)arg2 error:(id*)arg3 ;
-(NSDate *)stopDate;
-(void)finishAggregationWithDate:(id)arg1 ;
-(void)generateEvent:(id)arg1 ;
-(void)autoPauseWithDate:(id)arg1 ;
-(void)autoResumeWithDate:(id)arg1 ;
-(NSString *)clientProcessBundleIdentifier;
-(void)endHeartRateRecovery;
-(HDWorkoutSessionTaskServer *)taskServer;
-(void)setClient:(HDXPCClient *)arg1 ;
-(BOOL)storeSessionControllerState:(id)arg1 forRecoveryIdentifier:(id)arg2 error:(id*)arg3 ;
-(BOOL)prepareWithError:(id*)arg1 ;
-(BOOL)startActivityWithDate:(id)arg1 error:(id*)arg2 ;
-(BOOL)stopActivityWithDate:(id)arg1 error:(id*)arg2 ;
-(BOOL)endWithError:(id*)arg1 ;
-(BOOL)pauseWithError:(id*)arg1 ;
-(BOOL)resumeWithError:(id*)arg1 ;
-(void)generateError:(id)arg1 ;
-(void)_loadOrCreatePersistentEntity;
-(void)stateMachine:(id)arg1 persistTransition:(id)arg2 ;
-(void)stateMachine:(id)arg1 didTransition:(id)arg2 fromState:(id)arg3 toState:(id)arg4 date:(id)arg5 error:(id)arg6 ;
-(void)stateMachine:(id)arg1 willEnterState:(id)arg2 date:(id)arg3 error:(id)arg4 ;
-(void)stateMachine:(id)arg1 didEnterState:(id)arg2 date:(id)arg3 error:(id)arg4 ;
-(id)initWithProfile:(id)arg1 configuration:(id)arg2 sessionUUID:(id)arg3 workoutManager:(id)arg4 ;
-(void)didBecomeCurrent;
-(void)didResignCurrentWithError:(id)arg1 ;
-(id)taskServerConfigurationForRecoveryWithError:(id*)arg1 ;
-(id)_detailedDescriptionString;
-(void)_queue_startInvalidationTimer;
-(id)_detailedDescriptionComponents;
-(void)_queue_cacheClientIdentifiers;
-(void)_queue_stopInvalidationTimer;
-(void)_queue_setupSessionController;
-(void)_recoverPersistedState;
-(BOOL)_resendWorkoutEventsToDataDestination:(id)arg1 error:(id*)arg2 ;
-(void)_deleteSessionAndFinishAssociatedBuilderAtDate:(id)arg1 ;
-(void)_queue_evaluateRequestedTargetStateAtDate:(id)arg1 ;
-(void)_queue_generateEventWithType:(long long)arg1 date:(id)arg2 ;
-(void)_queue_generateError:(id)arg1 ;
-(void)_queue_setTargetState:(long long)arg1 date:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_queue_generateEvent:(id)arg1 ;
-(BOOL)_persistenceQueue_storeSessionControllerState:(id)arg1 forRecoveryIdentifier:(id)arg2 error:(id*)arg3 ;
-(void)_queue_processStopEvent:(id)arg1 ;
-(void)_queue_invalidationTimerDidFire;
-(id)_queue_currentWorkoutSessionConfiguration;
-(id)_retrieveSessionControllerStateForRecoveryIdentifier:(id)arg1 error:(id*)arg2 ;
-(BOOL)_enqueueEvent:(long long)arg1 stateMachine:(id)arg2 date:(id)arg3 error:(id*)arg4 ;
-(void)unitTest_setSessionController:(id)arg1 ;
-(void)unitTest_setStopEventGenerationWaitInterval:(double)arg1 ;
-(void)unitTest_generateStopEvent;
-(id)_defaultConfigurationWithWorkoutConfiguration:(id)arg1 ;
-(HKSource *)clientSource;
-(void)dealloc;
-(NSUUID *)identifier;
-(NSString *)description;
-(void)removeObserver:(id)arg1 ;
-(long long)state;
-(BOOL)isActive;
-(NSString *)applicationIdentifier;
-(void)finish;
@end

