/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:49:37 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct {
	id field1;
	id field2;
	unsigned char field3;
} SCD_Struct_HD0;

typedef struct HDSQLiteRow* HDSQLiteRowRef;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned countSinceLastSuccess : 1;
	unsigned timeSinceLastSuccess : 1;
	unsigned timestamp : 1;
} SCD_Struct_HD3;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct {
	long long majorVersion;
	long long minorVersion;
	long long patchVersion;
} SCD_Struct_HD6;

typedef struct {
	unsigned code : 1;
} SCD_Struct_HD7;

typedef struct {
	unsigned altitude : 1;
	unsigned course : 1;
	unsigned horizontalAccuracy : 1;
	unsigned latitude : 1;
	unsigned longitude : 1;
	unsigned speed : 1;
	unsigned timestamp : 1;
	unsigned verticalAccuracy : 1;
} SCD_Struct_HD8;

typedef struct {
	unsigned confidence : 1;
	unsigned latitude : 1;
	unsigned longitude : 1;
	unsigned uncertainty : 1;
	unsigned locationOfInterestType : 1;
} SCD_Struct_HD9;

typedef struct {
	unsigned confidence : 1;
	unsigned nextEntryTime : 1;
	unsigned modeOfTransportation : 1;
	unsigned sourceType : 1;
} SCD_Struct_HD10;

typedef struct {
	unsigned sequenceNumber : 1;
	unsigned statusCode : 1;
} SCD_Struct_HD11;

typedef struct _compressed_pair<long long *, std::__1::allocator<long long> > {
	long long __value_;
} compressed_pair<long long *, std::__1::allocator<long long> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::hash<long long>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::equal_to<long long>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::equal_to<long long>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::less<long long>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::less<long long>, true> >;

typedef struct HDCumulativeStatistics_DEPRECATED {
	double _sum;
	long long _count;
	double _startTime;
	double _endTime;
} HDCumulativeStatistics_DEPRECATED;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<HDCumulativeSample_DEPRECATED *, std::__1::allocator<HDCumulativeSample_DEPRECATED> > {
	HDCumulativeSample_DEPRECATED __value_;
} compressed_pair<HDCumulativeSample_DEPRECATED *, std::__1::allocator<HDCumulativeSample_DEPRECATED> >;

typedef struct vector<HDCumulativeSample_DEPRECATED, std::__1::allocator<HDCumulativeSample_DEPRECATED> > {
	HDCumulativeSample_DEPRECATED __begin_;
	HDCumulativeSample_DEPRECATED __end_;
	compressed_pair<HDCumulativeSample_DEPRECATED *, std::__1::allocator<HDCumulativeSample_DEPRECATED> > __end_cap_;
} vector<HDCumulativeSample_DEPRECATED, std::__1::allocator<HDCumulativeSample_DEPRECATED> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED> > >;

typedef struct map<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED> > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED> > > __tree_;
} map<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED> > >;

typedef struct _tree<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::less<long long>, true> > __pair3_;
} tree<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED> > >;

typedef struct map<long long, HDCumulativeStatistics_DEPRECATED, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, HDCumulativeStatistics_DEPRECATED> > > {
	tree<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, HDCumulativeStatistics_DEPRECATED> > > __tree_;
} map<long long, HDCumulativeStatistics_DEPRECATED, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, HDCumulativeStatistics_DEPRECATED> > >;

typedef struct HDCumulativeStatistics_DEPRECATEDInterval_DEPRECATED {
	double _startTime;
	double _endTime;
	long long _sampleCount;
	map<long long, HDCumulativeStatistics_DEPRECATED, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, HDCumulativeStatistics_DEPRECATED> > > _statisticsBySourceID;
} HDCumulativeStatistics_DEPRECATEDInterval_DEPRECATED;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, NSString *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, NSString *> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, NSString *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, NSString *> > >;

typedef struct unordered_map<long long, NSString *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, NSString *> > > {
	hash_table<std::__1::__hash_value_type<long long, NSString *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, NSString *> > > __table_;
} unordered_map<long long, NSString *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, NSString *> > >;

typedef struct vector<long long, std::__1::allocator<long long> > {
	long long __begin_;
	long long __end_;
	compressed_pair<long long *, std::__1::allocator<long long> > __end_cap_;
} vector<long long, std::__1::allocator<long long> >;

typedef struct HDCumulativeStatistics_DEPRECATEDBucket_DEPRECATED {
	double _startTime;
	double _endTime;
	double _intervalDuration;
	vector<long long, std::__1::allocator<long long> > _orderedSourceIDs;
	unordered_map<long long, NSString *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, NSString *> > > _sourceIDToBundleIdentifier;
	HDCumulativeStatistics_DEPRECATEDInterval_DEPRECATED _currentInterval;
	long long _currentIntervalIndex;
	vector<HDCumulativeSample_DEPRECATED, std::__1::allocator<HDCumulativeSample_DEPRECATED> > _remainders;
	HDCumulativeStatistics_DEPRECATED _statistics;
	map<long long, HDCumulativeStatistics_DEPRECATED, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, HDCumulativeStatistics_DEPRECATED> > > _statisticsBySourceID;
	map<std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, HDCumulativeStatistics_DEPRECATED> > > _statisticsBySourceBundleIdentifier;
} HDCumulativeStatistics_DEPRECATEDBucket_DEPRECATED;

typedef struct HDCumulativeStatistics_DEPRECATEDEngine_DEPRECATED {
	long long _currentBucketIndex;
	HDCumulativeStatistics_DEPRECATEDBucket_DEPRECATED _currentBucket;
	vector<HDCumulativeSample_DEPRECATED, std::__1::allocator<HDCumulativeSample_DEPRECATED> > _remainders;
} HDCumulativeStatistics_DEPRECATEDEngine_DEPRECATED;

typedef struct {
	double avg;
	double max;
	double min;
	unsigned long long count;
} SCD_Struct_HD39;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDDiscreteStats>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDDiscreteStats>, void *> > >;

typedef struct _tree<std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDDiscreteStats> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDDiscreteStats>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true> > __pair3_;
} tree<std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDDiscreteStats> > >;

typedef struct map<long long, _HDDiscreteStats, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDDiscreteStats> > > {
	tree<std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDDiscreteStats> > > __tree_;
} map<long long, _HDDiscreteStats, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDDiscreteStats> > >;

typedef struct linear_congruential_engine<unsigned int, 48271, 0, 2147483647> {
	unsigned __x_;
} linear_congruential_engine<unsigned int, 48271, 0, 2147483647>;

typedef struct param_type {
	double __mean_;
	double __stddev_;
} param_type;

typedef struct normal_distribution<double> {
	param_type __p_;
	double _V_;
	BOOL _V_hot_;
} normal_distribution<double>;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct MGNotificationTokenStruct* MGNotificationTokenStructRef;

typedef struct {
	unsigned batchSize : 1;
	unsigned condensedWorkouts : 1;
	unsigned createdSeries : 1;
	unsigned deletedSamples : 1;
	unsigned duration : 1;
	unsigned errorCode : 1;
	unsigned processedWorkouts : 1;
	unsigned timestamp : 1;
	unsigned underlyingErrorCode : 1;
	unsigned workoutsToCondense : 1;
	unsigned workoutsToRecondense : 1;
	unsigned reason : 1;
	unsigned hasWatchSource : 1;
	unsigned success : 1;
} SCD_Struct_HD49;

typedef struct {
	unsigned authorizationMode : 1;
	unsigned authorizationRequest : 1;
	unsigned authorizationStatus : 1;
	unsigned modificationDate : 1;
	unsigned modificationEpoch : 1;
	unsigned objectType : 1;
} SCD_Struct_HD50;

typedef struct __CFUserNotification* CFUserNotificationRef;

typedef struct shared_ptr<health::DataStore> {
	DataStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<health::DataStore>;

typedef struct {
	unsigned databaseSizeMB : 1;
	unsigned highFrequencyDataSizeMB : 1;
	unsigned lastMonthDatabaseSizeIncreaseMB : 1;
	unsigned lastMonthRowsAdded : 1;
	unsigned manuallyEnteredTypesCount : 1;
	unsigned percentageDeletedObjects : 1;
	unsigned rowCountObjects : 1;
	unsigned thirdPartyAppsCount : 1;
	unsigned thirdPartyAppsWroteDataCount : 1;
	unsigned timestamp : 1;
	unsigned rowCountCDA : 1;
	unsigned hasWatchSource : 1;
} SCD_Struct_HD53;

typedef struct {
	unsigned numberOfFriends : 1;
	unsigned numberOfFriendsAwaitingResponse : 1;
	unsigned numberOfFriendsHiddenFromMe : 1;
	unsigned numberOfFriendsMuted : 1;
	unsigned numberOfFriendsMyDataHidden : 1;
	unsigned numberOfFriendsPendingMyResponse : 1;
	unsigned timestamp : 1;
	unsigned maxFriendDuration : 1;
	unsigned medianFriendDuration : 1;
	unsigned minFriendDuration : 1;
} SCD_Struct_HD54;

typedef struct {
	unsigned daysSinceFirstCalorieGoal : 1;
	unsigned eventBusyTime : 1;
	unsigned numberOfEvents : 1;
	unsigned progressUpdateFrequency : 1;
	unsigned timeZoneOffset : 1;
	unsigned timestamp : 1;
	unsigned enableAchievements : 1;
	unsigned enableGoalCompletions : 1;
	unsigned enableStandReminders : 1;
	unsigned enableWeeklySummary : 1;
	unsigned wellnessComplicationOnWatchFace : 1;
} SCD_Struct_HD55;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > {
	HDActivityCacheStatisticsBuilderWorkoutSample __value_;
} compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > {
	HDActivityCacheStatisticsBuilderWorkoutSample __begin_;
	HDActivityCacheStatisticsBuilderWorkoutSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> >;

typedef struct _compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > {
	HDActivityCacheActiveSource __value_;
} compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> >;

typedef struct vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> > {
	HDActivityCacheActiveSource __begin_;
	HDActivityCacheActiveSource __end_;
	compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > __end_cap_;
} vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> >;

typedef struct __SecCertificate* SecCertificateRef;

typedef struct {
	unsigned count : 1;
	unsigned max : 1;
	unsigned min : 1;
	unsigned mostRecent : 1;
	unsigned mostRecentDate : 1;
	unsigned valueInCanonicalUnit : 1;
	unsigned valueInOriginalUnit : 1;
	unsigned final : 1;
	unsigned frozen : 1;
} SCD_Struct_HD61;

typedef struct {
	unsigned activeHours : 1;
	unsigned briskMinutes : 1;
	unsigned cacheIndex : 1;
	unsigned deepBreathingDuration : 1;
	unsigned energyBurned : 1;
	unsigned energyBurnedGoal : 1;
	unsigned energyBurnedGoalDate : 1;
	unsigned flightsClimbed : 1;
	unsigned pushCount : 1;
	unsigned sequence : 1;
	unsigned stepCount : 1;
	unsigned walkingAndRunningDistance : 1;
	unsigned wheelchairUse : 1;
} SCD_Struct_HD62;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > {
	HDActivityCacheStatisticsBuilderSample __value_;
} compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > {
	HDActivityCacheStatisticsBuilderSample __begin_;
	HDActivityCacheStatisticsBuilderSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >;

typedef struct {
	long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_HD65;

typedef struct {
	unsigned countSinceLastSuccess : 1;
	unsigned duration : 1;
	unsigned errorCode : 1;
	unsigned timeSinceLastSuccess : 1;
	unsigned timestamp : 1;
	unsigned underlyingErrorCode : 1;
	unsigned result : 1;
} SCD_Struct_HD66;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > {
	HDActivityCacheStatisticsBuilderStandHourSample __value_;
} compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > {
	HDActivityCacheStatisticsBuilderStandHourSample __begin_;
	HDActivityCacheStatisticsBuilderStandHourSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > >;

typedef struct _tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> > __pair3_;
} tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > >;

typedef struct map<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > >, std::__1::less<_HKDataTypeCode>, std::__1::allocator<std::__1::pair<const _HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > {
	tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > __tree_;
} map<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > >, std::__1::less<_HKDataTypeCode>, std::__1::allocator<std::__1::pair<const _HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > >;

typedef struct {
	unsigned list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_HD73;

typedef struct _compressed_pair<HistogramBucket *, std::__1::allocator<HistogramBucket> > {
	HistogramBucket __value_;
} compressed_pair<HistogramBucket *, std::__1::allocator<HistogramBucket> >;

typedef struct vector<HistogramBucket, std::__1::allocator<HistogramBucket> > {
	HistogramBucket __begin_;
	HistogramBucket __end_;
	compressed_pair<HistogramBucket *, std::__1::allocator<HistogramBucket> > __end_cap_;
} vector<HistogramBucket, std::__1::allocator<HistogramBucket> >;

typedef struct HistogramState {
	vector<HistogramBucket, std::__1::allocator<HistogramBucket> > _dateBuckets;
	double _histogramBucketAnchor;
	double _histogramBucketSize;
	long long _currentStartDateBucket;
} HistogramState;

typedef struct ObjectIdentifier {
	long long objectType;
	unsigned long long identifier;
} ObjectIdentifier;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::tuple<double, double> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::tuple<double, double> > >;

typedef struct _compressed_pair<std::__1::tuple<double, double> **, std::__1::allocator<std::__1::tuple<double, double> *> > {
	tuple<double, double> __value_;
} compressed_pair<std::__1::tuple<double, double> **, std::__1::allocator<std::__1::tuple<double, double> *> >;

typedef struct _split_buffer<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double> *> > {
	tuple<double, double> __first_;
	tuple<double, double> __begin_;
	tuple<double, double> __end_;
	compressed_pair<std::__1::tuple<double, double> **, std::__1::allocator<std::__1::tuple<double, double> *> > __end_cap_;
} split_buffer<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double> *> >;

typedef struct deque<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double> > > {
	split_buffer<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::tuple<double, double> > > __size_;
} deque<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double> > >;

typedef struct _compressed_pair<_HDStatisticsCollectionCalculatorImplementation *, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> > {
	_HDStatisticsCollectionCalculatorImplementation __value_;
} compressed_pair<_HDStatisticsCollectionCalculatorImplementation *, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> >;

typedef struct unique_ptr<_HDStatisticsCollectionCalculatorImplementation, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> > {
	compressed_pair<_HDStatisticsCollectionCalculatorImplementation *, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> > __ptr_;
} unique_ptr<_HDStatisticsCollectionCalculatorImplementation, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> >;

typedef struct _compressed_pair<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> > {
	HDActivityCacheHeartRateStatisticsBuilderHeartRateSample __value_;
} compressed_pair<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> >;

typedef struct vector<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> > {
	HDActivityCacheHeartRateStatisticsBuilderHeartRateSample __begin_;
	HDActivityCacheHeartRateStatisticsBuilderHeartRateSample __end_;
	compressed_pair<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> > __end_cap_;
} vector<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample, std::__1::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample> >;

typedef struct {
	double field1;
	BOOL field2;
	BOOL field3;
	BOOL field4;
} SCD_Struct_HD86;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct __CFSet* CFSetRef;

typedef struct HDSyncAnchorRange {
	long long start;
	long long end;
} HDSyncAnchorRange;

