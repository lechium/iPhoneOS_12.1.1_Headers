/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:49:34 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <HealthDaemon/HealthDaemon-Structs.h>
#import <libobjc.A.dylib/HDDiagnosticObject.h>

@protocol OS_dispatch_queue;
@class NSObject, NSMutableDictionary, NSNumber, HDProfile, NSString;

@interface HDDataManager : NSObject <HDDiagnosticObject> {

	NSObject*<OS_dispatch_queue> _queue;
	NSObject*<OS_dispatch_queue> _notificationQueue;
	NSMutableDictionary* _observersByDataType;
	os_unfair_lock_s _synchronousObserverLock;
	NSMutableDictionary* _synchronousObserversBySampleType;
	BOOL _needsSynchronousNotification;
	unsigned long long _openTransactions;
	NSMutableDictionary* _pendingObjectsBySampleType;
	NSNumber* _lastAnchor;
	HDProfile* _profile;

}

@property (assign,nonatomic,__weak) HDProfile * profile;              //@synthesize profile=_profile - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)initWithProfile:(id)arg1 ;
-(HDProfile *)profile;
-(void)removeObserver:(id)arg1 forDataType:(id)arg2 ;
-(void)addObserver:(id)arg1 forDataType:(id)arg2 ;
-(BOOL)insertDataObjects:(id)arg1 withProvenance:(id)arg2 creationDate:(double)arg3 error:(id*)arg4 ;
-(id)diagnosticDescription;
-(void)setProfile:(HDProfile *)arg1 ;
-(BOOL)insertDataObjects:(id)arg1 sourceEntity:(id)arg2 deviceEntity:(id)arg3 sourceVersion:(id)arg4 creationDate:(double)arg5 error:(id*)arg6 ;
-(BOOL)deleteSamplesWithTypes:(id)arg1 sourceEntities:(id)arg2 recursiveDeleteAuthorizationBlock:(/*^block*/id)arg3 error:(id*)arg4 ;
-(BOOL)deleteObjectsWithUUIDs:(id)arg1 configuration:(id)arg2 error:(id*)arg3 ;
-(BOOL)deleteDataObjects:(id)arg1 restrictedSourceEntities:(id)arg2 failIfNotFound:(BOOL)arg3 recursiveDeleteAuthorizationBlock:(/*^block*/id)arg4 error:(id*)arg5 ;
-(BOOL)insertDataObjects:(id)arg1 withProvenance:(id)arg2 creationDate:(double)arg3 skipInsertionFilter:(BOOL)arg4 updateSourceOrder:(BOOL)arg5 error:(id*)arg6 ;
-(void)shouldNotifyForDataObjects:(id)arg1 provenance:(id)arg2 database:(id)arg3 anchor:(id)arg4 ;
-(BOOL)deleteSamplesWithSourceEntities:(id)arg1 error:(id*)arg2 ;
-(void)hasSampleWithBundleIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)containsDataObject:(id)arg1 ;
-(void)openObserverTransaction;
-(void)closeObserverTransaction;
-(BOOL)_insertDataObjects:(id)arg1 intoDatabase:(id)arg2 insertionContext:(id)arg3 updateSourceOrder:(BOOL)arg4 error:(id*)arg5 ;
-(void)_notifySynchronousObserversIfPossible;
-(void)_callObserversIfPossible;
-(void)_notifyObserversSamplesWithTypesWereRemoved:(id)arg1 anchor:(id)arg2 ;
-(void)shouldNotifyForDeletedSamplesOfTypes:(id)arg1 database:(id)arg2 anchor:(id)arg3 ;
-(void)_notifySynchronousObserversForDeletedObjectTypes:(id)arg1 anchor:(id)arg2 ;
-(void)_notifyObserversWithAddedObjectsBySampleType:(id)arg1 lastAnchor:(id)arg2 ;
-(id)_observersForDataType:(id)arg1 ;
-(void)_callObservers:(id)arg1 withObjects:(id)arg2 type:(id)arg3 anchor:(id)arg4 ;
-(id)_observersForAllTypes;
-(void)_shouldNotifyForDeletedSamplesOfTypes:(id)arg1 anchor:(id)arg2 ;
-(BOOL)_deleteObjectsWithTypes:(id)arg1 sourceEntities:(id)arg2 recursiveDeleteAuthorizationBlock:(/*^block*/id)arg3 error:(id*)arg4 ;
-(BOOL)deleteDataObjectsOfClass:(Class)arg1 predicate:(id)arg2 limit:(unsigned long long)arg3 deletedSampleCount:(unsigned long long*)arg4 notifyObservers:(BOOL)arg5 generateDeletedObjects:(BOOL)arg6 recursiveDeleteAuthorizationBlock:(/*^block*/id)arg7 error:(id*)arg8 ;
-(void)_notificationQueue_notifyObserversSamplesWithTypesWereRemoved:(id)arg1 anchor:(id)arg2 ;
-(id)_queue_observersAllTypesCreateIfNil:(BOOL)arg1 ;
-(id)_queue_observersForDataType:(id)arg1 createIfNil:(BOOL)arg2 ;
-(id)_queue_observersForKey:(id)arg1 createIfNil:(BOOL)arg2 ;
-(id)_synchronousObserverLock_synchronousObserverSetForSampleType:(id)arg1 ;
-(BOOL)_synchronousObserverLock_hasSynchronousObserverForSampleType:(id)arg1 ;
-(BOOL)insertDataObjects:(id)arg1 withProvenance:(id)arg2 creationDate:(double)arg3 skipInsertionFilter:(BOOL)arg4 error:(id*)arg5 ;
-(void)_callObservers:(id)arg1 forType:(id)arg2 source:(id)arg3 withAnchor:(id)arg4 ;
-(BOOL)deleteSamplesWithTypes:(id)arg1 sourceBundleIdentifier:(id)arg2 recursiveDeleteAuthorizationBlock:(/*^block*/id)arg3 error:(id*)arg4 ;
-(BOOL)deleteSamplesWithUUIDs:(id)arg1 recursiveDeleteAuthorizationBlock:(/*^block*/id)arg2 error:(id*)arg3 ;
-(BOOL)deleteSamplesWithUUIDs:(id)arg1 generateDeletedObjects:(BOOL)arg2 database:(id)arg3 error:(id*)arg4 ;
-(void)addObserverForAllTypes:(id)arg1 ;
-(void)removeObserverForAllTypes:(id)arg1 ;
-(void)addSynchronousObserver:(id)arg1 forSampleType:(id)arg2 ;
-(void)removeSynchronousObserver:(id)arg1 forSampleType:(id)arg2 ;
-(void)setBackgroundObserverFrequency:(id)arg1 forDataType:(id)arg2 frequency:(long long)arg3 completion:(/*^block*/id)arg4 ;
@end

