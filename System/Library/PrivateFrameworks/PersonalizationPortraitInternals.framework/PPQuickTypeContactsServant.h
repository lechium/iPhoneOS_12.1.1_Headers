/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:52:50 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/PersonalizationPortraitInternals.framework/PersonalizationPortraitInternals
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/PPQuickTypeServantProtocol.h>

@protocol OS_dispatch_semaphore, SGSuggestionsServiceContactsProtocol;
@class CNContactStore, _PASLock, NSCache, NSArray, PPContactScorer, NSObject;

@interface PPQuickTypeContactsServant : NSObject <PPQuickTypeServantProtocol> {

	CNContactStore* _store;
	_PASLock* _meCardCacheLock;
	_PASLock* _meContactDataLock;
	NSCache* _meQuickTypeItemCache;
	NSArray* _peopleKeysToFetch;
	NSCache* _cachedNameLookups;
	PPContactScorer* _contactScorer;
	NSObject*<OS_dispatch_semaphore> _initializationComplete;
	BOOL _consultScorerForImmediateResult;
	id<SGSuggestionsServiceContactsProtocol> _contactService;

}
+(id)_supportedPeopleSemanticTypes;
-(void)setStore:(id)arg1 ;
-(void)clearCaches;
-(void)_registerForNotifications;
-(id)quickTypeItemsWithQuery:(id)arg1 limit:(unsigned long long)arg2 explanationSet:(id)arg3 ;
-(void)_warmUpFormatters;
-(void)setContactScorer:(id)arg1 ;
-(void)setContactService:(id)arg1 ;
-(void)setCachedNameLookup:(id)arg1 ;
-(void)_preloadMeCardAndItemCacheWithMeContact:(id)arg1 ;
-(id)_applySmartLimitingToCandidates:(id)arg1 clientLimit:(unsigned long long)arg2 explanationSet:(id)arg3 ;
-(id)_predictionForPeopleQuery:(id)arg1 fromEligibleSemanticTextField:(BOOL)arg2 limit:(unsigned long long)arg3 explanationSet:(id)arg4 ;
-(BOOL)_isMeCardQuery:(id)arg1 ;
-(id)_mePredictionCacheKeyForQuery:(id)arg1 ;
-(id)_predictMeCardDetailForQuery:(id)arg1 limit:(unsigned long long)arg2 explanationSet:(id)arg3 ;
-(id)_predictMeCardDetailForQuery:(id)arg1 limit:(unsigned long long)arg2 fromSemanticTextField:(BOOL)arg3 explanationSet:(id)arg4 ;
-(id)_lookupScoredPeopleWithNamePrefix:(id)arg1 recipients:(id)arg2 explanationSet:(id)arg3 ;
-(id)_lookupPeopleWithNamePrefix:(id)arg1 recipients:(id)arg2 explanationSet:(id)arg3 ;
-(id)_lookupPeopleWithNamePrefixUncached:(id)arg1 recipients:(id)arg2 explanationSet:(id)arg3 ;
-(BOOL)_isSemanticTagEligible:(unsigned char)arg1 ;
-(id)_selfContactQueryqueryFromSemanticTagquery:(id)arg1 ;
-(id)_loadMeCard;
-(id)_updateMeCardFromSource;
-(id)init;
-(id)initWithOptions:(unsigned char)arg1 ;
@end

