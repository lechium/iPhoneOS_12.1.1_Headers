/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:46:14 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/NeutrinoCore.framework/NeutrinoCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
@class NSObject, NSMutableDictionary;

@interface NUGlobalSettings : NSObject {

	NSObject*<OS_dispatch_queue> _queue;
	NSMutableDictionary* _settings;

}
+(void)setCacheNodeDirectoryURL:(id)arg1 ;
+(long long)deviceDefaultSampleMode;
+(BOOL)deviceDisableMetal;
+(BOOL)deviceDisableOpenGL;
+(BOOL)devicePrintRenderer;
+(id)globalSettings;
+(void)setDeviceDisableMetal:(BOOL)arg1 ;
+(void)setDeviceDisableOpenGL:(BOOL)arg1 ;
+(void)setDevicePrintRenderer:(BOOL)arg1 ;
+(void)setDeviceDefaultSampleMode:(long long)arg1 ;
+(long long)storagePoolNonPurgeableLimit;
+(void)setStoragePoolNonPurgeableLimit:(long long)arg1 ;
+(long long)storagePoolPurgeableLimit;
+(void)setStoragePoolPurgeableLimit:(long long)arg1 ;
+(double)storagePoolMigrationDelay;
+(void)setStoragePoolMigrationDelay:(double)arg1 ;
+(BOOL)surfaceStorageFactoryUsePool;
+(void)setSurfaceStorageFactoryUsePool:(BOOL)arg1 ;
+(BOOL)bufferStorageFactoryUsePool;
+(void)setBufferStorageFactoryUsePool:(BOOL)arg1 ;
+(BOOL)imageRenderJobUseSurfaceRenderer;
+(void)setImageRenderJobUseSurfaceRenderer:(BOOL)arg1 ;
+(BOOL)imageRenderJobUseTextureRenderer;
+(void)setImageRenderJobUseTextureRenderer:(BOOL)arg1 ;
+(double)renderJSPipelineTimeout;
+(void)setRenderJSPipelineTimeout:(double)arg1 ;
+(BOOL)rendererUseHalfFloat;
+(void)setRendererUseHalfFloat:(BOOL)arg1 ;
+(BOOL)rendererClampToAlpha;
+(void)setRendererClampToAlpha:(BOOL)arg1 ;
+(BOOL)rendererUseP3Linear;
+(void)setRendererUseP3Linear:(BOOL)arg1 ;
+(long long)imageTileSize;
+(void)setImageTileSize:(long long)arg1 ;
+(BOOL)imageSourceDisableRAW;
+(BOOL)imageSourceDisableCacheImmediately;
+(void)setImageSourceDisableCacheImmediately:(BOOL)arg1 ;
+(long long)cacheNodeCacheSizeLimit;
+(void)setCacheNodeCacheSizeLimit:(long long)arg1 ;
+(long long)cacheNodeFilePermissions;
+(void)setCacheNodeFilePermissions:(long long)arg1 ;
+(double)cacheNodeImageCompression;
+(void)setCacheNodeImageCompression:(double)arg1 ;
+(BOOL)isViewDebugEnabled;
+(void)setViewDebugEnabled:(BOOL)arg1 ;
+(id)cacheNodeDirectoryURL;
+(BOOL)renderVideoLive;
+(void)setRenderVideoLive:(BOOL)arg1 ;
+(BOOL)platformHasWideColor;
+(void)setPlatformHasWideColor:(BOOL)arg1 ;
+(id)pipelineSourceURL;
+(void)setPipelineSourceURL:(id)arg1 ;
+(BOOL)imageLayerDebug;
+(void)setImageLayerDebug:(BOOL)arg1 ;
+(BOOL)logPeakRenderCIUsuage;
+(void)setLogPeakRenderCIUsuage:(BOOL)arg1 ;
+(void)setImageSourceDisableRAW:(BOOL)arg1 ;
+(void)reset;
-(void)setSetting:(id)arg1 forKey:(id)arg2 ;
-(id)_settingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(id)settingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(BOOL)boolSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(id)stringSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(long long)integerSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(double)doubleSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(id)urlSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(id)init;
-(void)reset;
@end

