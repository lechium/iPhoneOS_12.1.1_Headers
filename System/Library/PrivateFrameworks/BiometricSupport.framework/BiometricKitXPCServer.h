/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:48:57 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/BiometricSupport.framework/BiometricSupport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <BiometricSupport/BiometricSupport-Structs.h>
#import <libobjc.A.dylib/CMWakeGestureDelegate.h>
#import <libobjc.A.dylib/NSXPCListenerDelegate.h>

@protocol OS_dispatch_queue;
@class NSObject, NSString;

@interface BiometricKitXPCServer : NSObject <CMWakeGestureDelegate, NSXPCListenerDelegate> {

	NSObject*<OS_dispatch_queue> _cmdDispatchQueue;

}

@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> cmdDispatchQueue;              //@synthesize cmdDispatchQueue=_cmdDispatchQueue - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(BOOL)isPreferenceKeySet:(id)arg1 ;
+(id)getPreferenceValueOfClass:(Class)arg1 forKey:(id)arg2 ;
+(void)setPreferenceValue:(id)arg1 forKey:(id)arg2 ;
-(BOOL)isEphemeralMultiUser;
-(BOOL)isInternalBuild;
-(long long)getDeviceStateWithClient:(id)arg1 ;
-(int)startNewMatchAttemptWithClient:(id)arg1 ;
-(int)completeEnrollmentWithClient:(id)arg1 ;
-(int)suspendEnrollment:(BOOL)arg1 withClient:(id)arg2 ;
-(int)setTemplate:(id)arg1 forIdentity:(id)arg2 withClient:(id)arg3 ;
-(int)getAugmentationEligibility:(BOOL*)arg1 forIdentity:(id)arg2 withClient:(id)arg3 ;
-(int)fieldDiagnosticsControl:(unsigned)arg1 inData:(id)arg2 outData:(id*)arg3 withClient:(id)arg4 ;
-(int)queryIdentityMigrationFailureForUser:(unsigned)arg1 failed:(BOOL*)arg2 clear:(BOOL)arg3 withClient:(id)arg4 ;
-(int)enableMatchAutoRetry:(BOOL)arg1 withClient:(id)arg2 ;
-(int)pauseFaceDetectTimer:(BOOL)arg1 withClient:(id)arg2 ;
-(id)getBioLog;
-(void)sbStatus;
-(unsigned long long)getSKSLockStateForUser:(unsigned)arg1 ;
-(void)enrollUpdate:(id)arg1 withTimestamp:(unsigned long long)arg2 ;
-(void)enrollFeedback:(id)arg1 withTimestamp:(unsigned long long)arg2 ;
-(id)identities:(id)arg1 withClient:(id)arg2 ;
-(int)removeIdentity:(id)arg1 withOptions:(id)arg2 withClient:(id)arg3 ;
-(BOOL)isDisplayOn;
-(void)timestampEvent:(unsigned long long)arg1 absoluteTime:(unsigned long long)arg2 ;
-(int)setIORegistryProperty:(id)arg1 toValue:(id)arg2 onService:(id)arg3 ;
-(id)pullDebugImageData:(BOOL)arg1 rotated:(BOOL)arg2 hasWidth:(unsigned*)arg3 hasHeight:(unsigned*)arg4 withClient:(id)arg5 ;
-(id)getCalibrationDataInfoWithClient:(id)arg1 ;
-(BOOL)fileRadarWithLogs:(id)arg1 withDescription:(id)arg2 ;
-(int)getBioLockoutState:(long long*)arg1 forUser:(unsigned)arg2 withClient:(id)arg3 ;
-(int)enrollContinue;
-(int)getBiometrickitdInfo:(SCD_Struct_Bi1*)arg1 ;
-(void)statusMessage:(unsigned)arg1 withData:(id)arg2 timestamp:(unsigned long long)arg3 ;
-(void)matchResult:(id)arg1 timestamp:(unsigned long long)arg2 ;
-(void)enrollResult:(id)arg1 withTimestamp:(unsigned long long)arg2 ;
-(id)identitiesOfUser:(unsigned)arg1 ;
-(void)notifyAppIsInactive:(BOOL)arg1 withClient:(id)arg2 ;
-(int)enroll:(int)arg1 forUser:(unsigned)arg2 withOptions:(id)arg3 withClient:(id)arg4 ;
-(int)match:(id)arg1 withOptions:(id)arg2 withClient:(id)arg3 ;
-(int)detectPresenceWithOptions:(id)arg1 withClient:(id)arg2 ;
-(int)cancelWithClient:(id)arg1 ;
-(int)updateIdentity:(id)arg1 withOptions:(id)arg2 withClient:(id)arg3 ;
-(int)removeAllIdentitiesForUser:(unsigned)arg1 withOptions:(id)arg2 withClient:(id)arg3 ;
-(id)getIdentityFromUUID:(id)arg1 withClient:(id)arg2 ;
-(long long)getMaxIdentityCount:(int)arg1 withClient:(id)arg2 ;
-(long long)getFreeIdentityCount:(int)arg1 forUser:(unsigned)arg2 withClient:(id)arg3 ;
-(int)registerDSID:(unsigned long long)arg1 withOptions:(id)arg2 withClient:(id)arg3 ;
-(int)registerStoreToken:(id)arg1 withClient:(id)arg2 ;
-(int)getCountersignedStoreToken:(id*)arg1 withClient:(id)arg2 ;
-(int)diagnostics:(int)arg1 withOptions:(id)arg2 passed:(BOOL*)arg3 withDetails:(id*)arg4 withClient:(id)arg5 ;
-(int)setUserDSID:(unsigned long long)arg1 withOptions:(id)arg2 withClient:(id)arg3 ;
-(int)resetAppleConnectCounterWithClient:(id)arg1 ;
-(id)getIdentitiesDatabaseUUIDForUser:(unsigned)arg1 withClient:(id)arg2 ;
-(id)getIdentitiesDatabaseHashForUser:(unsigned)arg1 withClient:(id)arg2 ;
-(int)dropUnlockTokenWithClient:(id)arg1 ;
-(int)forceBioLockoutForUser:(unsigned)arg1 withOptions:(id)arg2 withClient:(id)arg3 ;
-(id)pullAlignmentData;
-(id)pullMatchPolicyInfoData;
-(id)getNodeTopologyForIdentity:(id)arg1 withClient:(id)arg2 ;
-(id)getProtectedConfigurationForUser:(unsigned)arg1 withClient:(id)arg2 ;
-(id)getSystemProtectedConfigurationWithClient:(id)arg1 ;
-(int)setProtectedConfiguration:(id)arg1 forUser:(unsigned)arg2 withOptions:(id)arg3 withClient:(id)arg4 ;
-(int)setSystemProtectedConfiguration:(id)arg1 withOptions:(id)arg2 withClient:(id)arg3 ;
-(BOOL)getEnabledForUnlock;
-(int)setAppleMesaSEPLoggingLevel;
-(long long)getProvisioningStateWithClient:(id)arg1 ;
-(BOOL)isFingerOnWithClient:(id)arg1 ;
-(int)enableBackgroundFdet:(BOOL)arg1 withClient:(id)arg2 ;
-(BOOL)isXARTAvailableWithClient:(id)arg1 ;
-(int)getBiometryAvailability:(long long*)arg1 forUser:(unsigned)arg2 withClient:(id)arg3 ;
-(unsigned long long)getLoggingType;
-(long long)getEnrollmentCount;
-(int)getTimestampCollection:(SCD_Struct_Bi2*)arg1 ;
-(void)registerDelegate:(BOOL)arg1 withClient:(id)arg2 ;
-(BOOL)isAriadneSignpostsEnabled;
-(id)pullCalibrationDataWithClient:(id)arg1 ;
-(id)pullCaptureBufferWithClient:(id)arg1 ;
-(int)setDebugImages:(BOOL)arg1 withClient:(id)arg2 ;
-(id)getSerialisedTemplatesForUser:(unsigned)arg1 ;
-(unsigned)getTemplateListCRCForUser:(unsigned)arg1 ;
-(long long)getSensorCalibrationStatusWithClient:(id)arg1 ;
-(long long)getCalBlobVersion;
-(long long)getCalibrationDataState;
-(float)getModulationRatio;
-(id)getSensorInfoWithClient:(id)arg1 ;
-(id)getLogs:(BOOL)arg1 withDetails:(id*)arg2 ;
-(BOOL)isClassCFileAccessible;
-(NSObject*<OS_dispatch_queue>)cmdDispatchQueue;
-(void)wakeGestureManager:(id)arg1 didUpdateWakeGesture:(long long)arg2 ;
-(id)init;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
@end

