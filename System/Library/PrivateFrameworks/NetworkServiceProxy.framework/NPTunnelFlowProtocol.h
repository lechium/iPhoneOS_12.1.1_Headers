/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:44:34 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/NetworkServiceProxy.framework/NetworkServiceProxy
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <NetworkServiceProxy/NetworkServiceProxy-Structs.h>
#import <NetworkServiceProxy/NPTunnelFlow.h>

@protocol OS_dispatch_data;
@class NSObject;

@interface NPTunnelFlowProtocol : NPTunnelFlow {

	BOOL _waitingForOutput;
	BOOL _disconnectedByApp;
	BOOL _disconnectedByTunnel;
	BOOL _discardFirstData;
	BOOL _connectedOnTunnelReadyForData;
	BOOL _connectedOnInitialData;
	nw_protocol* _inputProtocol;
	NSObject*<OS_dispatch_data> _inputBuffer;

}

@property (assign) BOOL disconnectedByApp;                               //@synthesize disconnectedByApp=_disconnectedByApp - In the implementation block
@property (assign) BOOL disconnectedByTunnel;                            //@synthesize disconnectedByTunnel=_disconnectedByTunnel - In the implementation block
@property (retain) NSObject*<OS_dispatch_data> inputBuffer;              //@synthesize inputBuffer=_inputBuffer - In the implementation block
@property (assign) BOOL discardFirstData;                                //@synthesize discardFirstData=_discardFirstData - In the implementation block
@property (assign) BOOL connectedOnTunnelReadyForData;                   //@synthesize connectedOnTunnelReadyForData=_connectedOnTunnelReadyForData - In the implementation block
@property (assign) BOOL connectedOnInitialData;                          //@synthesize connectedOnInitialData=_connectedOnInitialData - In the implementation block
@property (assign) BOOL waitingForOutput;                                //@synthesize waitingForOutput=_waitingForOutput - In the implementation block
@property (readonly) nw_protocol* inputProtocol;                         //@synthesize inputProtocol=_inputProtocol - In the implementation block
-(id)initWithTunnel:(id)arg1 appRule:(id)arg2 inputProtocol:(nw_protocol*)arg3 extraProperties:(id)arg4 ;
-(void)handleAppData:(id)arg1 ;
-(void)sendDataToClient:(id)arg1 fromTunnel:(BOOL)arg2 ;
-(void)readDataFromClient;
-(BOOL)waitingForOutput;
-(void)setWaitingForOutput:(BOOL)arg1 ;
-(void)closeClientFlowWithError:(int)arg1 ;
-(BOOL)isClientFlowClosed;
-(void)handleTunnelReadyForData;
-(nw_protocol*)inputProtocol;
-(void)setConnectedOnInitialData:(BOOL)arg1 ;
-(void)setDiscardFirstData:(BOOL)arg1 ;
-(void)setConnectedOnTunnelReadyForData:(BOOL)arg1 ;
-(void)setDisconnectedByApp:(BOOL)arg1 ;
-(BOOL)disconnectedByTunnel;
-(BOOL)disconnectedByApp;
-(void)setDisconnectedByTunnel:(BOOL)arg1 ;
-(BOOL)connectedOnTunnelReadyForData;
-(BOOL)connectedOnInitialData;
-(void)notifyClientConnected;
-(BOOL)discardFirstData;
-(BOOL)addBufferToFrameArray:(nw_frame_array_s*)arg1 bufferSize:(unsigned long long)arg2 ;
-(void)dropInputProtocol;
-(unsigned)addInputFramesToArray:(nw_frame_array_s*)arg1 limitMinimumBytes:(unsigned)arg2 limitMaximumBytes:(unsigned)arg3 limitMaximumFrames:(unsigned)arg4 ;
-(unsigned)addOutputFramesToArray:(nw_frame_array_s*)arg1 limitMinimumBytes:(unsigned)arg2 limitMaximumBytes:(unsigned)arg3 limitMaximumFrames:(unsigned)arg4 ;
-(void)handleOutputFrame:(id)arg1 send:(BOOL)arg2 ;
-(void)setInputBuffer:(NSObject*<OS_dispatch_data>)arg1 ;
-(NSObject*<OS_dispatch_data>)inputBuffer;
-(id)appData;
-(void)setAppData:(id)arg1 ;
-(BOOL)connect;
-(void)disconnect;
@end

