/*
* This header is generated by classdump-dyld 1.0
* on Saturday, June 1, 2019 at 6:51:58 PM Mountain Standard Time
* Operating System: Version 12.1.1 (Build 16C5050a)
* Image Source: /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomEvaluator.framework/SymptomEvaluator
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <libobjc.A.dylib/DiagnosticsServiceInterface.h>

@protocol OS_dispatch_queue;
@class ArbitratorExpertSystemHandler, NSObject, NSMutableDictionary, NSString;

@interface DiagnosticsServiceImpl : NSObject <NSXPCListenerDelegate, DiagnosticsServiceInterface> {

	ArbitratorExpertSystemHandler* arb_engine;
	NSObject*<OS_dispatch_queue> queue;
	NSMutableDictionary* allowanceCache;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)shutdown;
-(BOOL)_checkRateLimitForConnection:(id)arg1 ;
-(BOOL)assertEntitlement:(id)arg1 entitlement:(id)arg2 private:(BOOL)arg3 ;
-(void)snapshotWithSignature:(id)arg1 duration:(unsigned long long)arg2 events:(id)arg3 payload:(id)arg4 actions:(id)arg5 wantsRemoteCase:(BOOL)arg6 reply:(/*^block*/id)arg7 ;
-(void)startSessionWithSignature:(id)arg1 duration:(unsigned long long)arg2 events:(id)arg3 payload:(id)arg4 actions:(id)arg5 wantsRemoteCase:(BOOL)arg6 reply:(/*^block*/id)arg7 ;
-(void)addToSession:(id)arg1 event:(id)arg2 payload:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)addToSession:(id)arg1 events:(id)arg2 payload:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)addSignatureContentForSession:(id)arg1 key:(id)arg2 content:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)endSession:(id)arg1 ;
-(void)cancelSession:(id)arg1 ;
-(void)getDiagnosticPayloadsForSignatures:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getSessionStatisticsWithReply:(/*^block*/id)arg1 ;
-(void)getAllCasesWithReply:(/*^block*/id)arg1 ;
-(void)resetDiagnosticCaseStorageWithReply:(/*^block*/id)arg1 ;
-(void)resetDiagnosticCaseUsageWithReply:(/*^block*/id)arg1 ;
-(void)resetAllWithReply:(/*^block*/id)arg1 ;
-(void)triggerRemoteSessionForSignature:(id)arg1 groupIdentifier:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)assertCLIPSFactString:(id)arg1 module:(id)arg2 asSymptom:(BOOL)arg3 reply:(/*^block*/id)arg4 ;
-(void)postAWDEvent:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getExpertSystemsStatus:(/*^block*/id)arg1 ;
-(BOOL)_checkRateLimitForAllowance:(id)arg1 time:(id)arg2 ;
-(id)responseDictWithSuccess:(BOOL)arg1 sessionId:(id)arg2 groupId:(id)arg3 additionalDict:(id)arg4 reasonCode:(long long)arg5 ;
-(id)responseDictWithSuccess:(BOOL)arg1 reasonCode:(long long)arg2 ;
-(BOOL)validateSignature:(id)arg1 ;
-(id)responseDictWithSuccess:(BOOL)arg1 sessionId:(id)arg2 ;
-(void)startLogCollectionForSession:(id)arg1 signature:(id)arg2 duration:(unsigned long long)arg3 reply:(/*^block*/id)arg4 ;
-(void)endLogCollectionForSession:(id)arg1 signature:(id)arg2 reply:(/*^block*/id)arg3 ;
-(id)initWithQueue:(id)arg1 ;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
@end

