//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "RecentlyClosedTabViewControllerDelegate.h"
#import "TabBarDelegate.h"
#import "TabOverviewDelegate.h"
#import "TabSnapshotCacheDelegate.h"
#import "TiltedTabViewDelegate.h"

@class Application, BrowserController, CloudTabStore, NSArray, NSMapTable, NSMutableArray, NSMutableSet, NSSet, NSString, NSTimer, NSUUID, RecentlyClosedTabViewController, TabBar, TabDocument, TabOverview, TabSnapshotCache, TiltedTabView, UIBarButtonItem, UIButton, _SFBrowserSavedState;

@interface TabController : NSObject <RecentlyClosedTabViewControllerDelegate, TabBarDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, TiltedTabViewDelegate>
{
    BrowserController *_browserController;	// 8 = 0x8
    NSMutableArray *_normalTabDocuments;	// 16 = 0x10
    NSMutableArray *_privateTabDocuments;	// 24 = 0x18
    NSTimer *_saveStateTimer;	// 32 = 0x20
    NSTimer *_stateValidateTimer;	// 40 = 0x28
    TabDocument *_tabDocumentBeingHiddenFromTabView;	// 48 = 0x30
    NSMutableSet *_tabDocumentsAboutToBeClosedInTiltedTabView;	// 56 = 0x38
    UIBarButtonItem *_tiltedTabViewAddTabButton;	// 64 = 0x40
    _Bool _tiltedTabViewIsShowing;	// 72 = 0x48
    _Bool _tabOverviewIsShowing;	// 73 = 0x49
    NSTimer *_updateContinuityTimer;	// 80 = 0x50
    _Bool _tabBarItemsFixed;	// 88 = 0x58
    _Bool _tabViewItemsFixed;	// 89 = 0x59
    RecentlyClosedTabViewController *_recentlyClosedTabController;	// 96 = 0x60
    TabSnapshotCache *_snapshotCache;	// 104 = 0x68
    _Bool _flushPendingSnapshots;	// 112 = 0x70
    CDUnknownBlockType _flushPendingSnapshotsCompletion;	// 120 = 0x78
    _Bool _didRestoreCloudTabsForEducationDevice;	// 128 = 0x80
    _Bool _didReceiveFirstCloudTabDeviceUpdateNotification;	// 129 = 0x81
    TabDocument *_tabDocumentBeingDragged;	// 136 = 0x88
    TabDocument *_placeholderTabDocumentBeingDragged;	// 144 = 0x90
    NSArray *_tabDocumentsToKeepVisible;	// 152 = 0x98
    NSMapTable *_tabOverviewItemToTabDocumentMap;	// 160 = 0xa0
    NSMapTable *_tiltedTabItemToTabDocumentMap;	// 168 = 0xa8
    NSUUID *_blankDocumentGroupIdentifier;	// 176 = 0xb0
    NSUUID *_privateBlankDocumentGroupIdentifier;	// 184 = 0xb8
    _Bool _switchingActiveDocument;	// 192 = 0xc0
    _Bool _isClosingDocuments;	// 193 = 0xc1
    NSString *_lastSearchTerm;	// 200 = 0xc8
    NSArray *_searchTermWords;	// 208 = 0xd0
    _Bool _snapshotsAreEnabled;	// 216 = 0xd8
    _Bool _tabsAreOnLease;	// 217 = 0xd9
    _Bool _shouldTogglePrivateBrowsingOnSplit;	// 218 = 0xda
    _Bool _shouldDeferSnapshotRequest;	// 219 = 0xdb
    TabBar *_tabBar;	// 224 = 0xe0
    TabDocument *_privateActiveTabDocument;	// 232 = 0xe8
    TabDocument *_normalActiveTabDocument;	// 240 = 0xf0
    _SFBrowserSavedState *_savedState;	// 248 = 0xf8
    long long _privateBrowsingMode;	// 256 = 0x100
    TiltedTabView *_tiltedTabView;	// 264 = 0x108
    UIButton *_tiltedTabViewPrivateBrowsingButton;	// 272 = 0x110
    TabOverview *_tabOverview;	// 280 = 0x118
    long long _tabDisplayMode;	// 288 = 0x120
}

@property(nonatomic) _Bool shouldDeferSnapshotRequest; // @synthesize shouldDeferSnapshotRequest=_shouldDeferSnapshotRequest;
@property(nonatomic) _Bool shouldTogglePrivateBrowsingOnSplit; // @synthesize shouldTogglePrivateBrowsingOnSplit=_shouldTogglePrivateBrowsingOnSplit;
@property(nonatomic) _Bool tabsAreOnLease; // @synthesize tabsAreOnLease=_tabsAreOnLease;
@property(nonatomic) long long tabDisplayMode; // @synthesize tabDisplayMode=_tabDisplayMode;
@property(nonatomic) _Bool snapshotsAreEnabled; // @synthesize snapshotsAreEnabled=_snapshotsAreEnabled;
@property(readonly, nonatomic) _Bool tabOverviewIsShowing; // @synthesize tabOverviewIsShowing=_tabOverviewIsShowing;
@property(readonly, retain, nonatomic) TabOverview *tabOverview; // @synthesize tabOverview=_tabOverview;
@property(readonly, nonatomic) UIButton *tiltedTabViewPrivateBrowsingButton; // @synthesize tiltedTabViewPrivateBrowsingButton=_tiltedTabViewPrivateBrowsingButton;
@property(readonly, retain, nonatomic) TiltedTabView *tiltedTabView; // @synthesize tiltedTabView=_tiltedTabView;
@property(nonatomic) long long privateBrowsingMode; // @synthesize privateBrowsingMode=_privateBrowsingMode;
@property(retain, nonatomic) _SFBrowserSavedState *savedState; // @synthesize savedState=_savedState;
@property(retain, nonatomic) TabDocument *normalActiveTabDocument; // @synthesize normalActiveTabDocument=_normalActiveTabDocument;
@property(retain, nonatomic) TabDocument *privateActiveTabDocument; // @synthesize privateActiveTabDocument=_privateActiveTabDocument;
@property(readonly, copy, nonatomic) NSArray *privateTabDocuments; // @synthesize privateTabDocuments=_privateTabDocuments;
@property(readonly, copy, nonatomic) NSArray *tabDocuments; // @synthesize tabDocuments=_normalTabDocuments;
@property(readonly, retain, nonatomic) TabBar *tabBar; // @synthesize tabBar=_tabBar;
- (void).cxx_destruct;	// IMP=0x00000001000e7090
- (void)didTransitionTabView;	// IMP=0x00000001000e6f2c
- (void)willTransitionTabView;	// IMP=0x00000001000e6da0
- (void)endSearching;	// IMP=0x00000001000e6d2c
@property(readonly, nonatomic) NSArray *tabDocumentsMatchingSearchTerm;
@property(retain, nonatomic) NSString *searchTerm;
- (void)_updateUserActivityTimerFired;	// IMP=0x00000001000e6a44
- (void)saveTabDocumentUserActivitySoon:(id)arg1;	// IMP=0x00000001000e6988
- (void)_cancelPendingUpdateUserActivityTimer;	// IMP=0x00000001000e693c
- (unsigned long long)_maximumSnapshotCacheCapacity;	// IMP=0x00000001000e68dc
- (unsigned long long)capacityForTabSnapshotCache:(id)arg1;	// IMP=0x00000001000e68d0
- (_Bool)tabSnapshotCacheShouldDeferNextSnapshotRequest:(id)arg1;	// IMP=0x00000001000e68c0
- (_Bool)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2;	// IMP=0x00000001000e6624
- (void)tabSnapshotCacheDidFinishUpdating:(id)arg1;	// IMP=0x00000001000e65b0
- (void)_updateTabSnapshotsWithIdentifier:(id)arg1 animated:(_Bool)arg2;	// IMP=0x00000001000e6300
- (void)_updateTabSnapshotsAnimated:(_Bool)arg1;	// IMP=0x00000001000e62ec
- (void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2;	// IMP=0x00000001000e62d4
- (void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2;	// IMP=0x00000001000e6268
- (void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000e6160
- (void)requestSnapshotForTabDocument:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000e5e8c
- (id)_cachedContentImageForTabDocument:(id)arg1 allowScaledImage:(_Bool)arg2;	// IMP=0x00000001000e5c68
- (id)cachedContentImageForTabDocument:(id)arg1;	// IMP=0x00000001000e5c58
- (void)flushPendingSnapshotsWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e5a40
- (void)_updateSnapshotCacheStateWithMaxiumCapacity:(unsigned long long)arg1;	// IMP=0x00000001000e5954
- (void)_updateSnapshotCacheState;	// IMP=0x00000001000e591c
- (void)invalidateSnapshotForTabDocument:(id)arg1;	// IMP=0x00000001000e56ec
- (void)tabDocumentDidUpdateUUID:(id)arg1;	// IMP=0x00000001000e56e0
- (void)_updateSnapshotIdentifiers;	// IMP=0x00000001000e5110
- (void)_updateTabOverviewItems;	// IMP=0x00000001000e4c78
@property(nonatomic) _Bool usesTabOverview;
- (void)tabOverview:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3;	// IMP=0x00000001000e47ec
- (_Bool)_tabViewCanCloseDocument:(id)arg1;	// IMP=0x00000001000e4710
- (_Bool)_tabItem:(id)arg1 matchesSearchText:(id)arg2;	// IMP=0x00000001000e3f64
- (void)tabOverviewDidChangeAllowsInteractivePresentation:(id)arg1;	// IMP=0x00000001000e3f28
- (_Bool)tabOverview:(id)arg1 cloudTab:(id)arg2 matchesSearchText:(id)arg3;	// IMP=0x00000001000e3ecc
- (_Bool)tabOverview:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3;	// IMP=0x00000001000e3e30
- (void)tabOverview:(id)arg1 item:(id)arg2 didProduceNavigationIntent:(id)arg3;	// IMP=0x00000001000e3d7c
- (id)snapshotForTabOverview:(id)arg1 item:(id)arg2;	// IMP=0x00000001000e3cd4
- (_Bool)tabOverview:(id)arg1 itemHasValidSnapshot:(id)arg2;	// IMP=0x00000001000e3c3c
- (void)tabOverview:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3;	// IMP=0x00000001000e3bac
- (id)tabOverview:(id)arg1 borrowContentViewForItem:(id)arg2 topBackdropHeight:(double)arg3;	// IMP=0x00000001000e3af4
- (double)tabOverview:(id)arg1 headerHeightForItem:(id)arg2;	// IMP=0x00000001000e3a68
- (void)tabOverviewDidUpdateItemVisibilityOrder:(id)arg1;	// IMP=0x00000001000e3a5c
- (void)tabOverview:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3;	// IMP=0x00000001000e398c
- (void)tabOverview:(id)arg1 closeItem:(id)arg2;	// IMP=0x00000001000e37f8
- (_Bool)tabOverviewCanSwipeToClose:(id)arg1;	// IMP=0x00000001000e3788
- (_Bool)tabOverview:(id)arg1 canCloseItem:(id)arg2;	// IMP=0x00000001000e372c
- (void)_createPlaceholderImageForTabDocument:(id)arg1;	// IMP=0x00000001000e35b0
- (void)tabOverview:(id)arg1 didSelectItem:(id)arg2;	// IMP=0x00000001000e3458
- (void)_addNewActiveTabOverviewTab;	// IMP=0x00000001000e335c
- (id)itemsToKeepVisibleForTabOverview:(id)arg1;	// IMP=0x00000001000e3328
- (id)currentItemForTabOverview:(id)arg1;	// IMP=0x00000001000e32d4
- (void)tabOverviewDidCancelDismissal:(id)arg1;	// IMP=0x00000001000e3284
- (void)tabOverviewDidBeginDismissal:(id)arg1;	// IMP=0x00000001000e3248
- (void)tabOverviewDidDismiss:(id)arg1;	// IMP=0x00000001000e3198
- (void)tabOverviewWillPresent:(id)arg1;	// IMP=0x00000001000e2fc4
- (id)_tabDocumentRepresentedByTabOverviewItem:(id)arg1;	// IMP=0x00000001000e2fac
- (void)showTabExposePopoverForTabOverview:(id)arg1;	// IMP=0x00000001000e2f70
- (void)showTabExposePopoverForTiltedTabView:(id)arg1;	// IMP=0x00000001000e2f34
- (void)tiltedTabViewDidEndSearching:(id)arg1;	// IMP=0x00000001000e2e58
- (void)tiltedTabViewWillBeginSearching:(id)arg1;	// IMP=0x00000001000e2d7c
- (_Bool)tiltedTabView:(id)arg1 cloudTab:(id)arg2 matchesSearchText:(id)arg3;	// IMP=0x00000001000e2d20
- (_Bool)tiltedTabView:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3;	// IMP=0x00000001000e2c84
- (void)_addNewActiveTiltedTabViewTab;	// IMP=0x00000001000e2c64
- (void)tiltedTabView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3;	// IMP=0x00000001000e2bcc
- (void)tiltedTabView:(id)arg1 item:(id)arg2 didProduceNavigationIntent:(id)arg3;	// IMP=0x00000001000e2b24
- (id)snapshotForTiltedTabView:(id)arg1 item:(id)arg2;	// IMP=0x00000001000e2a7c
- (_Bool)tiltedTabView:(id)arg1 itemHasValidSnapshot:(id)arg2;	// IMP=0x00000001000e29e4
- (struct CGSize)suggestedSnapshotSizeForTiltedTabView:(id)arg1;	// IMP=0x00000001000e2944
- (void)tiltedTabView:(id)arg1 animateTopBackdropView:(id)arg2 hidden:(_Bool)arg3;	// IMP=0x00000001000e2850
- (double)tiltedTabView:(id)arg1 headerHeightForItem:(id)arg2;	// IMP=0x00000001000e27c0
- (void)tiltedTabView:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3;	// IMP=0x00000001000e2730
- (id)tiltedTabView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id *)arg3 ofHeight:(double)arg4;	// IMP=0x00000001000e2674
- (id)expectedSuperviewForTiltedTabView:(id)arg1;	// IMP=0x00000001000e25fc
- (id)itemsToKeepVisibleForTiltedTabView:(id)arg1;	// IMP=0x00000001000e25c8
- (id)currentItemForTiltedTabView:(id)arg1;	// IMP=0x00000001000e2574
- (void)tiltedTabViewDidUpdateItemVisibilityOrder:(id)arg1;	// IMP=0x00000001000e2568
- (void)tiltedTabView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3;	// IMP=0x00000001000e24ac
- (void)tiltedTabView:(id)arg1 closeItem:(id)arg2;	// IMP=0x00000001000e2068
- (_Bool)tiltedTabView:(id)arg1 canCloseItem:(id)arg2;	// IMP=0x00000001000e200c
- (void)tiltedTabView:(id)arg1 didSelectItem:(id)arg2;	// IMP=0x00000001000e1fa8
- (void)tiltedTabViewDidDismiss:(id)arg1;	// IMP=0x00000001000e1ee8
- (void)tiltedTabViewWillDismiss:(id)arg1;	// IMP=0x00000001000e1eac
- (void)tiltedTabViewDidPresent:(id)arg1;	// IMP=0x00000001000e1ea8
- (void)tiltedTabViewWillPresent:(id)arg1;	// IMP=0x00000001000e1d6c
- (void)_updateCloudTabStorePeriodicUpdates;	// IMP=0x00000001000e1d10
- (id)_tabDocumentRepresentedByTiltedTabItem:(id)arg1;	// IMP=0x00000001000e1cf8
- (void)dismissTabViewAnimated:(_Bool)arg1;	// IMP=0x00000001000e1b98
- (void)dismissTabView;	// IMP=0x00000001000e1b88
- (void)_doneLongPress:(id)arg1;	// IMP=0x00000001000e1b4c
- (void)_doneLongPressRecognized:(id)arg1;	// IMP=0x00000001000e1af8
- (void)_addTabLongPress:(id)arg1;	// IMP=0x00000001000e1abc
- (void)_addTabLongPressRecognized:(id)arg1;	// IMP=0x00000001000e1a68
- (void)updateTiltedTabViewToolbarItems;	// IMP=0x00000001000e1a14
- (_Bool)_privateBrowsingButtonSelected;	// IMP=0x00000001000e19fc
- (void)_updateTiltedTabViewPrivateBrowsingButtonVisibility;	// IMP=0x00000001000e184c
@property(readonly, nonatomic) NSArray *tiltedTabViewToolbarItems;
- (id)_makeOpenNewTabInteraction;	// IMP=0x00000001000e11d4
- (void)_updateTabViewCloudTabs;	// IMP=0x00000001000e10f4
- (void)updateEducationTabsLastSyncDate;	// IMP=0x00000001000e0ff8
- (void)_restoreEducationTabsIfNecessaryAnimated:(_Bool)arg1;	// IMP=0x00000001000e0d84
- (void)restoreEducationDeviceTabs;	// IMP=0x00000001000e0d74
- (void)_cloudTabsDidUpdate:(id)arg1;	// IMP=0x00000001000e0bc0
- (void)_updateTiltedTabViewItemsWithTransition:(long long)arg1;	// IMP=0x00000001000e08a4
- (void)_updateTiltedTabViewItemsAnimated:(_Bool)arg1;	// IMP=0x00000001000e0898
- (void)_updateTiltedTabViewItems;	// IMP=0x00000001000e0888
@property(nonatomic) _Bool usesTiltedTabView;
- (void)updateTabViewsAnimatingTabBar:(_Bool)arg1;	// IMP=0x00000001000e0700
- (void)_updateExplanationViewVisibilityAnimated:(_Bool)arg1;	// IMP=0x00000001000e068c
- (_Bool)_shouldShowExplanationView;	// IMP=0x00000001000e05e4
- (void)_suppressSingleEmptyTabIfAppropriate;	// IMP=0x00000001000e0470
- (void)_openBlankTabDocumentInTabBarWithPrivateBrowsing:(_Bool)arg1;	// IMP=0x00000001000e0370
- (void)openBlankTabDocumentInTabBar;	// IMP=0x00000001000e0338
- (void)updateTabBarAnimated:(_Bool)arg1;	// IMP=0x00000001000e0314
- (void)_updateTabBarAnimated:(_Bool)arg1 keepingDocumentVisible:(id)arg2;	// IMP=0x00000001000e00b0
- (void)recentlyClosedTabViewController:(id)arg1 didSelectTabStateWithData:(id)arg2;	// IMP=0x00000001000dfe94
- (void)togglePrivateBrowsingOnSplitIfNeeded;	// IMP=0x00000001000dfe24
- (void)returnTabDocumentsToTabController:(id)arg1;	// IMP=0x00000001000dfd10
- (void)mergeAllTabDocumentsFromTabController:(id)arg1;	// IMP=0x00000001000dfc68
- (void)_adoptActiveTabDocument:(id)arg1 forPrivateBrowsing:(_Bool)arg2;	// IMP=0x00000001000dfbe8
- (void)_returnTabDocumentsToTabController:(id)arg1 forPrivateBrowsingTabs:(_Bool)arg2;	// IMP=0x00000001000df8b4
- (void)_mergeTabDocumentsFromTabController:(id)arg1 forPrivateBrowsingTabs:(_Bool)arg2;	// IMP=0x00000001000df3b8
- (_Bool)_tabsAreAllEmpty:(id)arg1;	// IMP=0x00000001000df344
- (void)acceptDropWithTabDocument:(id)arg1;	// IMP=0x00000001000df218
- (void)cancelDragInteraction;	// IMP=0x00000001000df114
- (void)closeDragInteractionPlaceholderTabDocument;	// IMP=0x00000001000df0bc
- (id)insertDragInteractionPlaceholderTabDocumentForTabDocument:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x00000001000deed4
- (void)tabOverview:(id)arg1 didEndDragInteractionAtPoint:(struct CGPoint)arg2;	// IMP=0x00000001000dee10
- (void)tabOverview:(id)arg1 didUpdateDragInteractionPoint:(struct CGPoint)arg2;	// IMP=0x00000001000dedb8
- (void)tabOverview:(id)arg1 didBeginDragInteractionForItem:(id)arg2 point:(struct CGPoint)arg3 anchorPoint:(struct CGPoint)arg4 zPosition:(double)arg5;	// IMP=0x00000001000dec68
- (_Bool)tabOverview:(id)arg1 canBeginDragInteractionForItem:(id)arg2;	// IMP=0x00000001000dec1c
- (void)tabBar:(id)arg1 item:(id)arg2 didProduceNavigationIntent:(id)arg3;	// IMP=0x00000001000deb68
- (void)tabBar:(id)arg1 didEndDragInteractionAtPoint:(struct CGPoint)arg2;	// IMP=0x00000001000deaa4
- (void)tabBar:(id)arg1 didUpdateDragInteractionPoint:(struct CGPoint)arg2;	// IMP=0x00000001000dea4c
- (void)tabBar:(id)arg1 didBeginDragInteractionForTabBarItem:(id)arg2 atPoint:(struct CGPoint)arg3 dragType:(long long)arg4;	// IMP=0x00000001000de914
- (_Bool)tabBar:(id)arg1 canBeginDragInteractionForTabBarItem:(id)arg2;	// IMP=0x00000001000de8c8
- (void)tabBar:(id)arg1 activateItem:(id)arg2;	// IMP=0x00000001000de7f8
- (void)tabBar:(id)arg1 toggleMediaCaptureMutedForItem:(id)arg2;	// IMP=0x00000001000de7b4
- (void)tabBar:(id)arg1 closeItem:(id)arg2;	// IMP=0x00000001000de760
- (void)tabBar:(id)arg1 moveItem:(id)arg2 overItem:(id)arg3;	// IMP=0x00000001000de680
- (void)tabBarAddTab:(id)arg1;	// IMP=0x00000001000de674
- (_Bool)tabBar:(id)arg1 canCloseItem:(id)arg2;	// IMP=0x00000001000de618
- (_Bool)tabBar:(id)arg1 canMoveItem:(id)arg2;	// IMP=0x00000001000de568
- (id)_tabDocumentRepresentedByTabBarItem:(id)arg1;	// IMP=0x00000001000de3e8
- (void)_setTabBarItemsFixed:(_Bool)arg1;	// IMP=0x00000001000de3d8
@property(nonatomic) _Bool usesTabBar;
- (void)_tabView:(id)arg1 handleNavigationIntent:(id)arg2 usingTabDocument:(id)arg3;	// IMP=0x00000001000de038
- (void)_performWithFixedTabViewItems:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ddff0
@property(readonly, nonatomic) Application *_application;
- (void)_updateAddTabButtonEnabled;	// IMP=0x00000001000ddf54
- (void)setPrivateBrowsingMode:(long long)arg1 animated:(_Bool)arg2;	// IMP=0x00000001000ddc4c
@property(nonatomic, getter=isPrivateBrowsingEnabled) _Bool privateBrowsingEnabled;
- (_Bool)_canCloseLastTab;	// IMP=0x00000001000ddb4c
- (void)clearBrowserController;	// IMP=0x00000001000dd99c
- (void)dealloc;	// IMP=0x00000001000dd8d8
- (_Bool)needsCloudTabPeriodicUpdates;	// IMP=0x00000001000dd8a8
@property(readonly, nonatomic) CloudTabStore *cloudTabStore;
- (void)_didReceiveMemoryWarning:(id)arg1;	// IMP=0x00000001000dd7e8
- (id)initWithBrowserController:(id)arg1;	// IMP=0x00000001000dd40c
- (void)openInitialBlankTabDocumentIfNeeded;	// IMP=0x0000000100004f2c
- (void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2;	// IMP=0x00000001000dd1f4
- (id)_tabDocumentForURL:(id)arg1 withUUID:(id)arg2;	// IMP=0x00000001000dd058
- (id)tabDocumentForURL:(id)arg1;	// IMP=0x00000001000dcca8
- (void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2;	// IMP=0x00000001000dcb44
- (void)closeTabsDocuments:(id)arg1;	// IMP=0x00000001000dc7f8
- (void)closeAllOpenTabsAnimated:(_Bool)arg1 exitTabView:(_Bool)arg2 temporarily:(_Bool)arg3;	// IMP=0x00000001000dc714
- (void)closeAllOpenTabsAnimated:(_Bool)arg1 exitTabView:(_Bool)arg2;	// IMP=0x00000001000dc704
- (void)closeTab;	// IMP=0x00000001000dc60c
- (void)_closeTabDocuments:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3 allowAddingToRecentlyClosedTabs:(_Bool)arg4 keepWebViewAlive:(_Bool)arg5;	// IMP=0x00000001000db548
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3 allowAddingToRecentlyClosedTabs:(_Bool)arg4 keepWebViewAlive:(_Bool)arg5;	// IMP=0x00000001000db45c
- (void)_adoptTabDocuments:(id)arg1 indicesFromMergingController:(id)arg2;	// IMP=0x00000001000db060
- (void)_detachTabDocuments:(id)arg1 nextActiveDocument:(id)arg2;	// IMP=0x00000001000dacd0
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 allowAddingToRecentlyClosedTabs:(_Bool)arg3;	// IMP=0x00000001000dacb4
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3;	// IMP=0x00000001000daca0
- (void)detachTabDocument:(id)arg1 animated:(_Bool)arg2;	// IMP=0x00000001000dabb0
- (void)closeTabDocumentWithURL:(id)arg1 UUID:(id)arg2;	// IMP=0x00000001000dab2c
- (void)closeTabDocument:(id)arg1 animated:(_Bool)arg2;	// IMP=0x00000001000dab1c
- (_Bool)_shouldFocusPreviousDocumentWhenClosingDocument:(id)arg1;	// IMP=0x00000001000dab0c
- (void)newTabWithPrivateBrowsing:(_Bool)arg1;	// IMP=0x00000001000da978
- (void)newTab;	// IMP=0x00000001000da940
- (void)_newTabFromTabViewButton;	// IMP=0x00000001000da8bc
- (id)_openBlankTabDocument;	// IMP=0x00000001000da87c
- (id)insertInitialBlankTabDocumentWithPrivateBrowsingIfNeeded:(_Bool)arg1;	// IMP=0x00000001000da758
- (void)insertNewBlankTabDocumentAnimated:(_Bool)arg1;	// IMP=0x00000001000da70c
- (id)_insertNewBlankTabDocumentWithPrivateBrowsing:(_Bool)arg1 inBackground:(_Bool)arg2 animated:(_Bool)arg3;	// IMP=0x00000001000da564
- (void)insertNewTabDocument:(id)arg1 openedFromTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;	// IMP=0x00000001000da464
- (void)insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;	// IMP=0x00000001000da360
- (void)_insertTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4 updateUI:(_Bool)arg5;	// IMP=0x00000001000d9ff8
- (void)_adoptTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 forPrivateBrowsing:(_Bool)arg3;	// IMP=0x00000001000d9f14
- (_Bool)_makeRoomForNewTabDocument:(id)arg1;	// IMP=0x00000001000d9de4
- (id)_oldestInactiveTabDocumentForPrivateBrowsing:(_Bool)arg1;	// IMP=0x00000001000d9c34
- (_Bool)canAddNewTabForPrivateBrowsing:(_Bool)arg1;	// IMP=0x00000001000d9be0
@property(readonly, nonatomic) _Bool canAddNewTabForCurrentBrowsingMode;
- (void)_switchActiveTabDocumentFromTabDocument:(id)arg1 toTabDocument:(id)arg2;	// IMP=0x00000001000d98c4
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2 deferActivation:(_Bool)arg3;	// IMP=0x00000001000d965c
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2;	// IMP=0x00000001000d964c
@property(retain, nonatomic) TabDocument *activeTabDocument;
@property(readonly, nonatomic) _Bool canCloseTab;
@property(nonatomic) _Bool tabViewDefersActivation;
@property(readonly, nonatomic) TabDocument *tabDocumentBeingActivated;
@property(readonly, nonatomic) _Bool hasTabsThatShouldBeObscuredForDigitalHealth;
- (void)deactivateAllUsageTrackingInformationIfNecessary;	// IMP=0x00000001000d9048
- (void)updateUsageTrackingInformationIfNecessary;	// IMP=0x00000001000d8ee4
- (void)_setActiveTabDocument:(id)arg1;	// IMP=0x00000001000d8e64
- (id)_activeTabDocumentForPrivateBrowsing:(_Bool)arg1;	// IMP=0x00000001000d8e40
- (void)_logActivationForTab:(id)arg1;	// IMP=0x00000001000d8d84
- (void)logTabActivationInterval:(double)arg1 forActivationType:(long long)arg2;	// IMP=0x00000001000d8b1c
- (void)_updateMergedItemsAndHibernatedTabsState;	// IMP=0x00000001000d89f8
- (void)updateHibernatedTabDocumentsSavingState;	// IMP=0x00000001000d8954
- (void)updateTabCount;	// IMP=0x00000001000d88f4
@property(readonly, copy, nonatomic) NSSet *allSnapshotIdentifiers;
@property(readonly, copy, nonatomic) NSArray *allTabDocuments;
- (id)_otherTabDocuments;	// IMP=0x00000001000d86b4
@property(readonly, copy, nonatomic) NSArray *currentTabDocuments;
@property(readonly, nonatomic) unsigned long long numberOfCurrentNonHiddenTabs;
- (id)_tabDocumentsForPrivateBrowsing:(_Bool)arg1;	// IMP=0x00000001000d85a4
- (id)_currentTabs;	// IMP=0x00000001000d8598
@property(readonly, nonatomic) RecentlyClosedTabViewController *recentlyClosedTabController;
- (void)_restorePersistentDocumentState:(id)arg1 into:(id)arg2 withCurrentActiveDocument:(id)arg3 activeDocumentIsValid:(_Bool)arg4 restoredActiveDocumentIndex:(unsigned long long)arg5;	// IMP=0x00000001000efd20
- (_Bool)_shouldRestoreBlankTab;	// IMP=0x00000001000efca4
- (void)_removeCurrentBackForwardItemFromTabDocument:(id)arg1;	// IMP=0x00000001000efab4
- (_Bool)readState;	// IMP=0x00000001000ef4e4
- (void)saveStateInBackground:(_Bool)arg1;	// IMP=0x0000000100003760
- (id)_persistentStateDictionaryForTabs:(id)arg1;	// IMP=0x00000001000ef4d4
- (id)_tabStatesForTabs:(id)arg1 quickUpdate:(_Bool)arg2;	// IMP=0x00000001000ef1c8
- (void)saveAllTabsStateWithQuickUpdate:(_Bool)arg1;	// IMP=0x00000001000ef0c8
- (void)saveBrowserWindowStateOnly;	// IMP=0x00000001000eeff4
- (unsigned long long)_indexOfActiveTab:(id)arg1 tabDocuments:(id)arg2;	// IMP=0x00000001000eede4
- (void)_prepareBrowserWindowDataIncludingTabState:(_Bool)arg1 forQuickUpdate:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000ee970
- (void)_persistAllTabStates:(id)arg1 needsValidate:(_Bool)arg2;	// IMP=0x00000001000ee544
- (void)updateTabStatesAndValidate:(_Bool)arg1 shouldDeleteEmptyWindow:(_Bool)arg2;	// IMP=0x00000001000edee4
- (void)saveStateInBackground:(_Bool)arg1 needsValidate:(_Bool)arg2;	// IMP=0x00000001000ede5c
- (void)removeSavedStateForTabDocument:(id)arg1;	// IMP=0x00000001000eddc4
- (void)saveStateForTabDocument:(id)arg1 needsValidate:(_Bool)arg2;	// IMP=0x00000001000edd0c
- (void)_updateSavedStateValidity:(_Bool)arg1;	// IMP=0x00000001000edbec
- (void)_validateSavedState:(id)arg1;	// IMP=0x00000001000edb44
- (void)_clearStateValidateTimer;	// IMP=0x00000001000edaf4
- (void)_saveStateFromTimer:(id)arg1;	// IMP=0x00000001000edae4
- (void)_setSaveStateTimer:(id)arg1;	// IMP=0x00000001000eda78
- (void)setStateNeedsSaved;	// IMP=0x00000001000ed9ec

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

